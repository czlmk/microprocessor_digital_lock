
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006018  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e0  080061a8  080061a8  000161a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b88  08006b88  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08006b88  08006b88  00016b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b90  08006b90  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b90  08006b90  00016b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b94  08006b94  00016b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08006b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  200000b8  08006c50  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08006c50  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a7d  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e8f  00000000  00000000  00038b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  0003b9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  0003c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c43  00000000  00000000  0003d830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013699  00000000  00000000  00065473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0933  00000000  00000000  00078b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  0016943f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000435c  00000000  00000000  00169508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  0016d864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006190 	.word	0x08006190

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	08006190 	.word	0x08006190

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]

	if (open) {
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00c      	beq.n	8000de0 <HAL_GPIO_EXTI_Callback+0x2c>
		counter += 1;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x60>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x60>)
 8000dce:	6013      	str	r3, [r2, #0]
		if (counter > 4) {
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x60>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	dd17      	ble.n	8000e08 <HAL_GPIO_EXTI_Callback+0x54>
			counter = 0;
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x60>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
		str = "WakeUP from SLEEP\r\n";
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
		HAL_PWR_DisableSleepOnExit();
	}

}
 8000dde:	e013      	b.n	8000e08 <HAL_GPIO_EXTI_Callback+0x54>
		str = "WakeUP from SLEEP\r\n";
 8000de0:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <HAL_GPIO_EXTI_Callback+0x64>)
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_GPIO_EXTI_Callback+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_GPIO_EXTI_Callback+0x64>)
 8000de8:	681c      	ldr	r4, [r3, #0]
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_GPIO_EXTI_Callback+0x64>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff f9ee 	bl	80001d0 <strlen>
 8000df4:	4603      	mov	r3, r0
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfc:	4621      	mov	r1, r4
 8000dfe:	4808      	ldr	r0, [pc, #32]	; (8000e20 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000e00:	f003 fdbc 	bl	800497c <HAL_UART_Transmit>
		HAL_PWR_DisableSleepOnExit();
 8000e04:	f002 ff94 	bl	8003d30 <HAL_PWR_DisableSleepOnExit>
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd90      	pop	{r4, r7, pc}
 8000e10:	200000d8 	.word	0x200000d8
 8000e14:	200000dc 	.word	0x200000dc
 8000e18:	200000d4 	.word	0x200000d4
 8000e1c:	080061a8 	.word	0x080061a8
 8000e20:	200001a0 	.word	0x200001a0

08000e24 <StartTransmitHumidity>:

void StartTransmitHumidity(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN StartTransmitTask */

	// UART status
	HAL_UART_Init(&huart1);
 8000e28:	480e      	ldr	r0, [pc, #56]	; (8000e64 <StartTransmitHumidity+0x40>)
 8000e2a:	f003 fd59 	bl	80048e0 <HAL_UART_Init>
	/* Infinite loop */
	ITM_Port32(31) = 2;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <StartTransmitHumidity+0x44>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	601a      	str	r2, [r3, #0]
	sprintf(strSensor, "Humidity: %.2d\r\n", (int) hsensor);
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <StartTransmitHumidity+0x48>)
 8000e36:	edd3 7a00 	vldr	s15, [r3]
 8000e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3e:	ee17 2a90 	vmov	r2, s15
 8000e42:	490b      	ldr	r1, [pc, #44]	; (8000e70 <StartTransmitHumidity+0x4c>)
 8000e44:	480b      	ldr	r0, [pc, #44]	; (8000e74 <StartTransmitHumidity+0x50>)
 8000e46:	f004 fd83 	bl	8005950 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) strSensor,
			(uint16_t) strlen(strSensor), 10000);
 8000e4a:	480a      	ldr	r0, [pc, #40]	; (8000e74 <StartTransmitHumidity+0x50>)
 8000e4c:	f7ff f9c0 	bl	80001d0 <strlen>
 8000e50:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) strSensor,
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e58:	4906      	ldr	r1, [pc, #24]	; (8000e74 <StartTransmitHumidity+0x50>)
 8000e5a:	4802      	ldr	r0, [pc, #8]	; (8000e64 <StartTransmitHumidity+0x40>)
 8000e5c:	f003 fd8e 	bl	800497c <HAL_UART_Transmit>

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200001a0 	.word	0x200001a0
 8000e68:	e000007c 	.word	0xe000007c
 8000e6c:	200000fc 	.word	0x200000fc
 8000e70:	080061bc 	.word	0x080061bc
 8000e74:	20000100 	.word	0x20000100

08000e78 <StartTransmitAcceleration>:

/**
 * Print acceleration to UART display.
 */
void StartTransmitAcceleration(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af02      	add	r7, sp, #8
	sprintf(strSensor, "Previous x: %.2d y: %.2d z: %.2d\r\n",
			(int) prev_acceleration_XYZ[0], (int) prev_acceleration_XYZ[1],
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <StartTransmitAcceleration+0x7c>)
 8000e80:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf(strSensor, "Previous x: %.2d y: %.2d z: %.2d\r\n",
 8000e84:	461a      	mov	r2, r3
			(int) prev_acceleration_XYZ[0], (int) prev_acceleration_XYZ[1],
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <StartTransmitAcceleration+0x7c>)
 8000e88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	sprintf(strSensor, "Previous x: %.2d y: %.2d z: %.2d\r\n",
 8000e8c:	4619      	mov	r1, r3
			(int) prev_acceleration_XYZ[2]);
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <StartTransmitAcceleration+0x7c>)
 8000e90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	sprintf(strSensor, "Previous x: %.2d y: %.2d z: %.2d\r\n",
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	460b      	mov	r3, r1
 8000e98:	4917      	ldr	r1, [pc, #92]	; (8000ef8 <StartTransmitAcceleration+0x80>)
 8000e9a:	4818      	ldr	r0, [pc, #96]	; (8000efc <StartTransmitAcceleration+0x84>)
 8000e9c:	f004 fd58 	bl	8005950 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) strSensor,
			(uint16_t) strlen(strSensor), 10000);
 8000ea0:	4816      	ldr	r0, [pc, #88]	; (8000efc <StartTransmitAcceleration+0x84>)
 8000ea2:	f7ff f995 	bl	80001d0 <strlen>
 8000ea6:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) strSensor,
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	f242 7310 	movw	r3, #10000	; 0x2710
 8000eae:	4913      	ldr	r1, [pc, #76]	; (8000efc <StartTransmitAcceleration+0x84>)
 8000eb0:	4813      	ldr	r0, [pc, #76]	; (8000f00 <StartTransmitAcceleration+0x88>)
 8000eb2:	f003 fd63 	bl	800497c <HAL_UART_Transmit>

	sprintf(strSensor, "Current x: %.2d y: %.2d z: %.2d\r\n",
			(int) acceleration_XYZ[0], (int) acceleration_XYZ[1],
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <StartTransmitAcceleration+0x8c>)
 8000eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf(strSensor, "Current x: %.2d y: %.2d z: %.2d\r\n",
 8000ebc:	461a      	mov	r2, r3
			(int) acceleration_XYZ[0], (int) acceleration_XYZ[1],
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <StartTransmitAcceleration+0x8c>)
 8000ec0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	sprintf(strSensor, "Current x: %.2d y: %.2d z: %.2d\r\n",
 8000ec4:	4619      	mov	r1, r3
			(int) acceleration_XYZ[2]);
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <StartTransmitAcceleration+0x8c>)
 8000ec8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	sprintf(strSensor, "Current x: %.2d y: %.2d z: %.2d\r\n",
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	490d      	ldr	r1, [pc, #52]	; (8000f08 <StartTransmitAcceleration+0x90>)
 8000ed2:	480a      	ldr	r0, [pc, #40]	; (8000efc <StartTransmitAcceleration+0x84>)
 8000ed4:	f004 fd3c 	bl	8005950 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) strSensor,
			(uint16_t) strlen(strSensor), 10000);
 8000ed8:	4808      	ldr	r0, [pc, #32]	; (8000efc <StartTransmitAcceleration+0x84>)
 8000eda:	f7ff f979 	bl	80001d0 <strlen>
 8000ede:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) strSensor,
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ee6:	4905      	ldr	r1, [pc, #20]	; (8000efc <StartTransmitAcceleration+0x84>)
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <StartTransmitAcceleration+0x88>)
 8000eea:	f003 fd47 	bl	800497c <HAL_UART_Transmit>

}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000238 	.word	0x20000238
 8000ef8:	080061d0 	.word	0x080061d0
 8000efc:	20000100 	.word	0x20000100
 8000f00:	200001a0 	.word	0x200001a0
 8000f04:	20000198 	.word	0x20000198
 8000f08:	080061f4 	.word	0x080061f4

08000f0c <StartReadHumidity>:

void StartReadHumidity(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	BSP_HSENSOR_Init();
 8000f10:	f000 fe64 	bl	8001bdc <BSP_HSENSOR_Init>
	ITM_Port32(31) = 3;
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <StartReadHumidity+0x20>)
 8000f16:	2203      	movs	r2, #3
 8000f18:	601a      	str	r2, [r3, #0]

	hsensor = BSP_HSENSOR_ReadHumidity();
 8000f1a:	f000 fe7f 	bl	8001c1c <BSP_HSENSOR_ReadHumidity>
 8000f1e:	eef0 7a40 	vmov.f32	s15, s0
 8000f22:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <StartReadHumidity+0x24>)
 8000f24:	edc3 7a00 	vstr	s15, [r3]
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	e000007c 	.word	0xe000007c
 8000f30:	200000fc 	.word	0x200000fc
 8000f34:	00000000 	.word	0x00000000

08000f38 <readHumidity>:

void readHumidity(void) {
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
	StartReadHumidity();
 8000f3e:	f7ff ffe5 	bl	8000f0c <StartReadHumidity>
	int timer = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
	// The user has 30 sec to find how to open box
	while (hsensor < 37 && timer < 100) {
 8000f46:	e009      	b.n	8000f5c <readHumidity+0x24>
		StartReadHumidity();
 8000f48:	f7ff ffe0 	bl	8000f0c <StartReadHumidity>
		StartTransmitHumidity();
 8000f4c:	f7ff ff6a 	bl	8000e24 <StartTransmitHumidity>
		HAL_Delay((uint32_t) 200);
 8000f50:	20c8      	movs	r0, #200	; 0xc8
 8000f52:	f001 fac5 	bl	80024e0 <HAL_Delay>
		timer = timer + 1;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
	while (hsensor < 37 && timer < 100) {
 8000f5c:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <readHumidity+0x120>)
 8000f5e:	edd3 7a00 	vldr	s15, [r3]
 8000f62:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800105c <readHumidity+0x124>
 8000f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6e:	d502      	bpl.n	8000f76 <readHumidity+0x3e>
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	2b63      	cmp	r3, #99	; 0x63
 8000f74:	dde8      	ble.n	8000f48 <readHumidity+0x10>
		//HAL_UART_Transmit(&huart1, (uint8_t*) str2, strlen(str2),
		//		HAL_MAX_DELAY);
	}

	// if the timer run out the box is closed
	if (timer >= 100) {
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	2b63      	cmp	r3, #99	; 0x63
 8000f7a:	dd1d      	ble.n	8000fb8 <readHumidity+0x80>
		open = 0;
 8000f7c:	4b38      	ldr	r3, [pc, #224]	; (8001060 <readHumidity+0x128>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
		str = "SLEEP MODE\r\n";
 8000f82:	4b38      	ldr	r3, [pc, #224]	; (8001064 <readHumidity+0x12c>)
 8000f84:	4a38      	ldr	r2, [pc, #224]	; (8001068 <readHumidity+0x130>)
 8000f86:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000f88:	4b36      	ldr	r3, [pc, #216]	; (8001064 <readHumidity+0x12c>)
 8000f8a:	681c      	ldr	r4, [r3, #0]
 8000f8c:	4b35      	ldr	r3, [pc, #212]	; (8001064 <readHumidity+0x12c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff f91d 	bl	80001d0 <strlen>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f9e:	4621      	mov	r1, r4
 8000fa0:	4832      	ldr	r0, [pc, #200]	; (800106c <readHumidity+0x134>)
 8000fa2:	f003 fceb 	bl	800497c <HAL_UART_Transmit>

		HAL_SuspendTick();
 8000fa6:	f001 fabf 	bl	8002528 <HAL_SuspendTick>

		HAL_PWR_EnableSleepOnExit();
 8000faa:	f002 feb1 	bl	8003d10 <HAL_PWR_EnableSleepOnExit>

		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000fae:	2101      	movs	r1, #1
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f002 fe79 	bl	8003ca8 <HAL_PWR_EnterSLEEPMode>
 8000fb6:	e002      	b.n	8000fbe <readHumidity+0x86>
	} else {
		open = 1;
 8000fb8:	4b29      	ldr	r3, [pc, #164]	; (8001060 <readHumidity+0x128>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
	}

	// if the box is open a noise is emited
	if (open) {
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <readHumidity+0x128>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d03f      	beq.n	8001046 <readHumidity+0x10e>
		int timer2 = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
		while (timer2 < 100) { //timer2 < 1000
 8000fca:	e039      	b.n	8001040 <readHumidity+0x108>
			for (uint32_t i = 0; i < 65; i++) {
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	e030      	b.n	8001034 <readHumidity+0xfc>
				float32_t radians = 3.14 * i / 32.5;
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f7ff fa96 	bl	8000504 <__aeabi_ui2d>
 8000fd8:	a31d      	add	r3, pc, #116	; (adr r3, 8001050 <readHumidity+0x118>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fb0b 	bl	80005f8 <__aeabi_dmul>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	4b20      	ldr	r3, [pc, #128]	; (8001070 <readHumidity+0x138>)
 8000ff0:	f7ff fc2c 	bl	800084c <__aeabi_ddiv>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fd0e 	bl	8000a1c <__aeabi_d2f>
 8001000:	4603      	mov	r3, r0
 8001002:	60bb      	str	r3, [r7, #8]
				float32_t sin = arm_sin_f32(radians);
 8001004:	ed97 0a02 	vldr	s0, [r7, #8]
 8001008:	f004 fc1c 	bl	8005844 <arm_sin_f32>
 800100c:	eef0 7a40 	vmov.f32	s15, s0
 8001010:	edc7 7a00 	vstr	s15, [r7]
				uint32_t z = (uint32_t) (*(uint32_t*) &sin);
 8001014:	463b      	mov	r3, r7
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	607b      	str	r3, [r7, #4]
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, z);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	4814      	ldr	r0, [pc, #80]	; (8001074 <readHumidity+0x13c>)
 8001022:	f001 fc21 	bl	8002868 <HAL_DAC_SetValue>
				HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001026:	2100      	movs	r1, #0
 8001028:	4812      	ldr	r0, [pc, #72]	; (8001074 <readHumidity+0x13c>)
 800102a:	f001 fbd0 	bl	80027ce <HAL_DAC_Start>
			for (uint32_t i = 0; i < 65; i++) {
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3301      	adds	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b40      	cmp	r3, #64	; 0x40
 8001038:	d9cb      	bls.n	8000fd2 <readHumidity+0x9a>
			}

			timer2 = timer2 + 1;
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	3301      	adds	r3, #1
 800103e:	613b      	str	r3, [r7, #16]
		while (timer2 < 100) { //timer2 < 1000
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	2b63      	cmp	r3, #99	; 0x63
 8001044:	ddc2      	ble.n	8000fcc <readHumidity+0x94>
		}

	}
}
 8001046:	bf00      	nop
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd90      	pop	{r4, r7, pc}
 800104e:	bf00      	nop
 8001050:	51eb851f 	.word	0x51eb851f
 8001054:	40091eb8 	.word	0x40091eb8
 8001058:	200000fc 	.word	0x200000fc
 800105c:	42140000 	.word	0x42140000
 8001060:	200000d8 	.word	0x200000d8
 8001064:	200000d4 	.word	0x200000d4
 8001068:	08006218 	.word	0x08006218
 800106c:	200001a0 	.word	0x200001a0
 8001070:	40404000 	.word	0x40404000
 8001074:	20000134 	.word	0x20000134

08001078 <shake>:

void shake(void) {
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
	if ((acceleration_XYZ[0] != prev_acceleration_XYZ[0])
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <shake+0xbc>)
 800107e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001082:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <shake+0xc0>)
 8001084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001088:	429a      	cmp	r2, r3
 800108a:	d04e      	beq.n	800112a <shake+0xb2>
			&& (abs(acceleration_XYZ[0]) >= acc_thresh)
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <shake+0xbc>)
 800108e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001092:	2b00      	cmp	r3, #0
 8001094:	bfb8      	it	lt
 8001096:	425b      	neglt	r3, r3
 8001098:	b29b      	uxth	r3, r3
 800109a:	ee07 3a90 	vmov	s15, r3
 800109e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <shake+0xc4>)
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b0:	da00      	bge.n	80010b4 <shake+0x3c>
			&& (abs(acceleration_XYZ[1]) >= acc_thresh)
			&& (acceleration_XYZ[2] != prev_acceleration_XYZ[2])
			&& (abs(acceleration_XYZ[2]) >= acc_thresh)) {
		shaken = 1;
	}
}
 80010b2:	e03a      	b.n	800112a <shake+0xb2>
			&& (acceleration_XYZ[1] != prev_acceleration_XYZ[1])
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <shake+0xbc>)
 80010b6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <shake+0xc0>)
 80010bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d032      	beq.n	800112a <shake+0xb2>
			&& (abs(acceleration_XYZ[1]) >= acc_thresh)
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <shake+0xbc>)
 80010c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	bfb8      	it	lt
 80010ce:	425b      	neglt	r3, r3
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <shake+0xc4>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e8:	da00      	bge.n	80010ec <shake+0x74>
}
 80010ea:	e01e      	b.n	800112a <shake+0xb2>
			&& (acceleration_XYZ[2] != prev_acceleration_XYZ[2])
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <shake+0xbc>)
 80010ee:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <shake+0xc0>)
 80010f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d016      	beq.n	800112a <shake+0xb2>
			&& (abs(acceleration_XYZ[2]) >= acc_thresh)) {
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <shake+0xbc>)
 80010fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	bfb8      	it	lt
 8001106:	425b      	neglt	r3, r3
 8001108:	b29b      	uxth	r3, r3
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <shake+0xc4>)
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	da00      	bge.n	8001124 <shake+0xac>
}
 8001122:	e002      	b.n	800112a <shake+0xb2>
		shaken = 1;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <shake+0xc8>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	20000198 	.word	0x20000198
 8001138:	20000238 	.word	0x20000238
 800113c:	20000000 	.word	0x20000000
 8001140:	200000e4 	.word	0x200000e4
 8001144:	00000000 	.word	0x00000000

08001148 <checkShaken>:

void checkShaken(void) {
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b08b      	sub	sp, #44	; 0x2c
 800114c:	af00      	add	r7, sp, #0
	BSP_ACCELERO_AccGetXYZ(acceleration_XYZ);
 800114e:	486a      	ldr	r0, [pc, #424]	; (80012f8 <checkShaken+0x1b0>)
 8001150:	f000 fd2c 	bl	8001bac <BSP_ACCELERO_AccGetXYZ>
	if (iter > 0) {
 8001154:	4b69      	ldr	r3, [pc, #420]	; (80012fc <checkShaken+0x1b4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	dd03      	ble.n	8001164 <checkShaken+0x1c>
		shake();
 800115c:	f7ff ff8c 	bl	8001078 <shake>
		// optionally print the read values
		StartTransmitAcceleration();
 8001160:	f7ff fe8a 	bl	8000e78 <StartTransmitAcceleration>
	}
	iter++;
 8001164:	4b65      	ldr	r3, [pc, #404]	; (80012fc <checkShaken+0x1b4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a64      	ldr	r2, [pc, #400]	; (80012fc <checkShaken+0x1b4>)
 800116c:	6013      	str	r3, [r2, #0]

	// copy all values of current acceleration to other
	for (int i = 0; i < 3; i++) {
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
 8001172:	e00a      	b.n	800118a <checkShaken+0x42>
		prev_acceleration_XYZ[i] = acceleration_XYZ[i];
 8001174:	4a60      	ldr	r2, [pc, #384]	; (80012f8 <checkShaken+0x1b0>)
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800117c:	4a60      	ldr	r2, [pc, #384]	; (8001300 <checkShaken+0x1b8>)
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 3; i++) {
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	3301      	adds	r3, #1
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	2b02      	cmp	r3, #2
 800118e:	ddf1      	ble.n	8001174 <checkShaken+0x2c>
	}

	if (shaken == 1) {
 8001190:	4b5c      	ldr	r3, [pc, #368]	; (8001304 <checkShaken+0x1bc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	f040 80a4 	bne.w	80012e2 <checkShaken+0x19a>
		open = 0;
 800119a:	4b5b      	ldr	r3, [pc, #364]	; (8001308 <checkShaken+0x1c0>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
		int timer2 = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
		while (timer2 < 50) {
 80011a4:	e039      	b.n	800121a <checkShaken+0xd2>
			for (uint32_t i = 0; i < 65; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e030      	b.n	800120e <checkShaken+0xc6>
				float32_t radians = 3.14 * i / 32.5;
 80011ac:	69f8      	ldr	r0, [r7, #28]
 80011ae:	f7ff f9a9 	bl	8000504 <__aeabi_ui2d>
 80011b2:	a34f      	add	r3, pc, #316	; (adr r3, 80012f0 <checkShaken+0x1a8>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fa1e 	bl	80005f8 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	4b50      	ldr	r3, [pc, #320]	; (800130c <checkShaken+0x1c4>)
 80011ca:	f7ff fb3f 	bl	800084c <__aeabi_ddiv>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fc21 	bl	8000a1c <__aeabi_d2f>
 80011da:	4603      	mov	r3, r0
 80011dc:	60fb      	str	r3, [r7, #12]
				float32_t sin = arm_sin_f32(radians);
 80011de:	ed97 0a03 	vldr	s0, [r7, #12]
 80011e2:	f004 fb2f 	bl	8005844 <arm_sin_f32>
 80011e6:	eef0 7a40 	vmov.f32	s15, s0
 80011ea:	edc7 7a01 	vstr	s15, [r7, #4]
				uint32_t z = (uint32_t) (*(uint32_t*) &sin);
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	60bb      	str	r3, [r7, #8]
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, z);
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	4845      	ldr	r0, [pc, #276]	; (8001310 <checkShaken+0x1c8>)
 80011fc:	f001 fb34 	bl	8002868 <HAL_DAC_SetValue>
				HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001200:	2100      	movs	r1, #0
 8001202:	4843      	ldr	r0, [pc, #268]	; (8001310 <checkShaken+0x1c8>)
 8001204:	f001 fae3 	bl	80027ce <HAL_DAC_Start>
			for (uint32_t i = 0; i < 65; i++) {
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	3301      	adds	r3, #1
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	2b40      	cmp	r3, #64	; 0x40
 8001212:	d9cb      	bls.n	80011ac <checkShaken+0x64>
			}

			timer2 = timer2 + 1;
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	3301      	adds	r3, #1
 8001218:	623b      	str	r3, [r7, #32]
		while (timer2 < 50) {
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	2b31      	cmp	r3, #49	; 0x31
 800121e:	ddc2      	ble.n	80011a6 <checkShaken+0x5e>
		}
		HAL_Delay(500);
 8001220:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001224:	f001 f95c 	bl	80024e0 <HAL_Delay>
		timer2 = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
		while (timer2 < 50) {
 800122c:	e039      	b.n	80012a2 <checkShaken+0x15a>
			for (uint32_t i = 0; i < 65; i++) {
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
 8001232:	e030      	b.n	8001296 <checkShaken+0x14e>
				float32_t radians = 3.14 * i / 32.5;
 8001234:	69b8      	ldr	r0, [r7, #24]
 8001236:	f7ff f965 	bl	8000504 <__aeabi_ui2d>
 800123a:	a32d      	add	r3, pc, #180	; (adr r3, 80012f0 <checkShaken+0x1a8>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff f9da 	bl	80005f8 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	4b2e      	ldr	r3, [pc, #184]	; (800130c <checkShaken+0x1c4>)
 8001252:	f7ff fafb 	bl	800084c <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fbdd 	bl	8000a1c <__aeabi_d2f>
 8001262:	4603      	mov	r3, r0
 8001264:	617b      	str	r3, [r7, #20]
				float32_t sin = arm_sin_f32(radians);
 8001266:	ed97 0a05 	vldr	s0, [r7, #20]
 800126a:	f004 faeb 	bl	8005844 <arm_sin_f32>
 800126e:	eef0 7a40 	vmov.f32	s15, s0
 8001272:	edc7 7a00 	vstr	s15, [r7]
				uint32_t z = (uint32_t) (*(uint32_t*) &sin);
 8001276:	463b      	mov	r3, r7
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	613b      	str	r3, [r7, #16]
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, z);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	4823      	ldr	r0, [pc, #140]	; (8001310 <checkShaken+0x1c8>)
 8001284:	f001 faf0 	bl	8002868 <HAL_DAC_SetValue>
				HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001288:	2100      	movs	r1, #0
 800128a:	4821      	ldr	r0, [pc, #132]	; (8001310 <checkShaken+0x1c8>)
 800128c:	f001 fa9f 	bl	80027ce <HAL_DAC_Start>
			for (uint32_t i = 0; i < 65; i++) {
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	3301      	adds	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2b40      	cmp	r3, #64	; 0x40
 800129a:	d9cb      	bls.n	8001234 <checkShaken+0xec>
			}

			timer2 = timer2 + 1;
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	3301      	adds	r3, #1
 80012a0:	623b      	str	r3, [r7, #32]
		while (timer2 < 50) {
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	2b31      	cmp	r3, #49	; 0x31
 80012a6:	ddc2      	ble.n	800122e <checkShaken+0xe6>
		}

		shaken = 0;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <checkShaken+0x1bc>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]

		str = "SLEEP MODE \r\n";
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <checkShaken+0x1cc>)
 80012b0:	4a19      	ldr	r2, [pc, #100]	; (8001318 <checkShaken+0x1d0>)
 80012b2:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <checkShaken+0x1cc>)
 80012b6:	681c      	ldr	r4, [r3, #0]
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <checkShaken+0x1cc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7fe ff87 	bl	80001d0 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ca:	4621      	mov	r1, r4
 80012cc:	4813      	ldr	r0, [pc, #76]	; (800131c <checkShaken+0x1d4>)
 80012ce:	f003 fb55 	bl	800497c <HAL_UART_Transmit>

		HAL_SuspendTick();
 80012d2:	f001 f929 	bl	8002528 <HAL_SuspendTick>

		HAL_PWR_EnableSleepOnExit();
 80012d6:	f002 fd1b 	bl	8003d10 <HAL_PWR_EnableSleepOnExit>

		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80012da:	2101      	movs	r1, #1
 80012dc:	2000      	movs	r0, #0
 80012de:	f002 fce3 	bl	8003ca8 <HAL_PWR_EnterSLEEPMode>

	}

}
 80012e2:	bf00      	nop
 80012e4:	372c      	adds	r7, #44	; 0x2c
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd90      	pop	{r4, r7, pc}
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	51eb851f 	.word	0x51eb851f
 80012f4:	40091eb8 	.word	0x40091eb8
 80012f8:	20000198 	.word	0x20000198
 80012fc:	200000e0 	.word	0x200000e0
 8001300:	20000238 	.word	0x20000238
 8001304:	200000e4 	.word	0x200000e4
 8001308:	200000d8 	.word	0x200000d8
 800130c:	40404000 	.word	0x40404000
 8001310:	20000134 	.word	0x20000134
 8001314:	200000d4 	.word	0x200000d4
 8001318:	08006228 	.word	0x08006228
 800131c:	200001a0 	.word	0x200001a0

08001320 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b0fd      	sub	sp, #500	; 0x1f4
 8001324:	af00      	add	r7, sp, #0

	HAL_Init();
 8001326:	f001 f867 	bl	80023f8 <HAL_Init>

	MX_GPIO_Init();
 800132a:	f000 fa5d 	bl	80017e8 <MX_GPIO_Init>
	MX_I2C2_Init();
 800132e:	f000 f9eb 	bl	8001708 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8001332:	f000 fa29 	bl	8001788 <MX_USART1_UART_Init>
	MX_DAC1_Init();
 8001336:	f000 f9b5 	bl	80016a4 <MX_DAC1_Init>
	BSP_ACCELERO_Init();
 800133a:	f000 fbf9 	bl	8001b30 <BSP_ACCELERO_Init>

	uint32_t timestart = 0;	//for recording start time of record mode
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	uint32_t fivesecstart = 0; // for recording starting time of single character
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	uint32_t maintimer = 0; //record start time of deciding listen mode or record mode
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	char morse[50];	//for strings to be printed

	char msg1[120];
	sprintf(msg1,
 8001350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001354:	49c2      	ldr	r1, [pc, #776]	; (8001660 <main+0x340>)
 8001356:	4618      	mov	r0, r3
 8001358:	f004 fafa 	bl	8005950 <siprintf>
			"Record mode, 30 second start (once for ., twice for _, three times for pause, four times to exit):\r\n");
	char msg2[100];
	sprintf(msg2, " message end\r\n");
 800135c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001360:	49c0      	ldr	r1, [pc, #768]	; (8001664 <main+0x344>)
 8001362:	4618      	mov	r0, r3
 8001364:	f004 faf4 	bl	8005950 <siprintf>
	char recorded[100]; //array to save recorded message
	sprintf(recorded, "Recorded message: \r\n");
 8001368:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800136c:	49be      	ldr	r1, [pc, #760]	; (8001668 <main+0x348>)
 800136e:	4618      	mov	r0, r3
 8001370:	f004 faee 	bl	8005950 <siprintf>
	char startingmsg[100];
	sprintf(startingmsg,
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	49bd      	ldr	r1, [pc, #756]	; (800166c <main+0x34c>)
 8001378:	4618      	mov	r0, r3
 800137a:	f004 fae9 	bl	8005950 <siprintf>
			"Press once to record, press twice to see recorded message:\r\n");
	//breakout variable
	uint16_t breakout = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	int checkCounter = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

	HAL_UART_Receive_IT(&huart1, &Rx_data, 1);
 800138a:	2201      	movs	r2, #1
 800138c:	49b8      	ldr	r1, [pc, #736]	; (8001670 <main+0x350>)
 800138e:	48b9      	ldr	r0, [pc, #740]	; (8001674 <main+0x354>)
 8001390:	f003 fb88 	bl	8004aa4 <HAL_UART_Receive_IT>

	// start in sleep mode
	str = "SLEEP MODE \r\n";
 8001394:	4bb8      	ldr	r3, [pc, #736]	; (8001678 <main+0x358>)
 8001396:	4ab9      	ldr	r2, [pc, #740]	; (800167c <main+0x35c>)
 8001398:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800139a:	4bb7      	ldr	r3, [pc, #732]	; (8001678 <main+0x358>)
 800139c:	681c      	ldr	r4, [r3, #0]
 800139e:	4bb6      	ldr	r3, [pc, #728]	; (8001678 <main+0x358>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7fe ff14 	bl	80001d0 <strlen>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013b0:	4621      	mov	r1, r4
 80013b2:	48b0      	ldr	r0, [pc, #704]	; (8001674 <main+0x354>)
 80013b4:	f003 fae2 	bl	800497c <HAL_UART_Transmit>

	HAL_SuspendTick();
 80013b8:	f001 f8b6 	bl	8002528 <HAL_SuspendTick>

	HAL_PWR_EnableSleepOnExit();
 80013bc:	f002 fca8 	bl	8003d10 <HAL_PWR_EnableSleepOnExit>

	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80013c0:	2101      	movs	r1, #1
 80013c2:	2000      	movs	r0, #0
 80013c4:	f002 fc70 	bl	8003ca8 <HAL_PWR_EnterSLEEPMode>

	while (1) {
		//When wake up

		HAL_ResumeTick();
 80013c8:	f001 f8be 	bl	8002548 <HAL_ResumeTick>

		str = "WakeUP from SLEEP\r\n";
 80013cc:	4baa      	ldr	r3, [pc, #680]	; (8001678 <main+0x358>)
 80013ce:	4aac      	ldr	r2, [pc, #688]	; (8001680 <main+0x360>)
 80013d0:	601a      	str	r2, [r3, #0]
		stmsg = 1;
 80013d2:	4bac      	ldr	r3, [pc, #688]	; (8001684 <main+0x364>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80013d8:	4ba7      	ldr	r3, [pc, #668]	; (8001678 <main+0x358>)
 80013da:	681c      	ldr	r4, [r3, #0]
 80013dc:	4ba6      	ldr	r3, [pc, #664]	; (8001678 <main+0x358>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7fe fef5 	bl	80001d0 <strlen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ee:	4621      	mov	r1, r4
 80013f0:	48a0      	ldr	r0, [pc, #640]	; (8001674 <main+0x354>)
 80013f2:	f003 fac3 	bl	800497c <HAL_UART_Transmit>

		//Try to unlock
		readHumidity();
 80013f6:	f7ff fd9f 	bl	8000f38 <readHumidity>

		if (!open) {
 80013fa:	4ba3      	ldr	r3, [pc, #652]	; (8001688 <main+0x368>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 812b 	beq.w	800165a <main+0x33a>
			continue;
		} else {

			// Box unlocked write now
			while (open) {
 8001404:	e123      	b.n	800164e <main+0x32e>
				if (checkCounter > 300) {
 8001406:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800140a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800140e:	dd04      	ble.n	800141a <main+0xfa>
					checkShaken();
 8001410:	f7ff fe9a 	bl	8001148 <checkShaken>
					checkCounter = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
				}
				checkCounter++;
 800141a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800141e:	3301      	adds	r3, #1
 8001420:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
				//print starting message
				if (stmsg == 1) {
 8001424:	4b97      	ldr	r3, [pc, #604]	; (8001684 <main+0x364>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d10d      	bne.n	8001448 <main+0x128>
					stmsg = 0;
 800142c:	4b95      	ldr	r3, [pc, #596]	; (8001684 <main+0x364>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) startingmsg,
							(uint16_t) strlen(startingmsg), 100000);
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe fecb 	bl	80001d0 <strlen>
 800143a:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart1, (uint8_t*) startingmsg,
 800143c:	b29a      	uxth	r2, r3
 800143e:	1d39      	adds	r1, r7, #4
 8001440:	4b92      	ldr	r3, [pc, #584]	; (800168c <main+0x36c>)
 8001442:	488c      	ldr	r0, [pc, #560]	; (8001674 <main+0x354>)
 8001444:	f003 fa9a 	bl	800497c <HAL_UART_Transmit>
				}
				//if pressed, if no more presses after 1 second go to record mode
				//if pressed one more time after 1 second go to listen mode(print msg)

				if (counter == 1) {
 8001448:	4b91      	ldr	r3, [pc, #580]	; (8001690 <main+0x370>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	f040 80fe 	bne.w	800164e <main+0x32e>
					maintimer = HAL_GetTick();
 8001452:	f001 f839 	bl	80024c8 <HAL_GetTick>
 8001456:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc
					while (1) {
//						  if (checkCounter > 300){
//							  checkShaken();
//							  checkCounter =0;
//						  }
						checkCounter++;
 800145a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800145e:	3301      	adds	r3, #1
 8001460:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

						if ((HAL_GetTick() - maintimer) > 1000) {
 8001464:	f001 f830 	bl	80024c8 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001474:	d9f1      	bls.n	800145a <main+0x13a>
							/////////////////////////////
							//when button is pressed once go into record mode, terminates after 30seconds
							//if button pressed twice go into listen mode to print message
							//within record mode, press once to start recording if no more presses after 5 seconds
							//record a dot, if pressed one more time record dash, if
							if (counter == 1) {
 8001476:	4b86      	ldr	r3, [pc, #536]	; (8001690 <main+0x370>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b01      	cmp	r3, #1
 800147c:	f040 80a2 	bne.w	80015c4 <main+0x2a4>
								//enter while loop that terminates after 30seconds
								HAL_UART_Transmit(&huart1, (uint8_t*) msg1,
										(uint16_t) strlen(msg1), 100000);
 8001480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe fea3 	bl	80001d0 <strlen>
 800148a:	4603      	mov	r3, r0
								HAL_UART_Transmit(&huart1, (uint8_t*) msg1,
 800148c:	b29a      	uxth	r2, r3
 800148e:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001492:	4b7e      	ldr	r3, [pc, #504]	; (800168c <main+0x36c>)
 8001494:	4877      	ldr	r0, [pc, #476]	; (8001674 <main+0x354>)
 8001496:	f003 fa71 	bl	800497c <HAL_UART_Transmit>
								timestart = HAL_GetTick();
 800149a:	f001 f815 	bl	80024c8 <HAL_GetTick>
 800149e:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
								//reset counter
								counter = 0;
 80014a2:	4b7b      	ldr	r3, [pc, #492]	; (8001690 <main+0x370>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
								//
								while (1) {

									//if button pressed one more time, within 1 seconds if no more presses add dot to data
									//if pressed one more time, add dash to data, if pressed one more time, add pause
									if (counter == 1) {
 80014a8:	4b79      	ldr	r3, [pc, #484]	; (8001690 <main+0x370>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d172      	bne.n	8001596 <main+0x276>
										fivesecstart = HAL_GetTick();
 80014b0:	f001 f80a 	bl	80024c8 <HAL_GetTick>
 80014b4:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
										// recording
										while (1) {
											checkShaken();
 80014b8:	f7ff fe46 	bl	8001148 <checkShaken>

											//if 1 seconds pass reset counter and transmit and break
											if ((HAL_GetTick() - fivesecstart)
 80014bc:	f001 f804 	bl	80024c8 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014cc:	d9f4      	bls.n	80014b8 <main+0x198>
													> 1000) {
												// if counter = 1 add dot to data
												if (counter == 1) {
 80014ce:	4b70      	ldr	r3, [pc, #448]	; (8001690 <main+0x370>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d113      	bne.n	80014fe <main+0x1de>
													strcpy(morse, ".");
 80014d6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80014da:	222e      	movs	r2, #46	; 0x2e
 80014dc:	801a      	strh	r2, [r3, #0]
													strcat(recorded, ".");
 80014de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe fe74 	bl	80001d0 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014f0:	4413      	add	r3, r2
 80014f2:	4968      	ldr	r1, [pc, #416]	; (8001694 <main+0x374>)
 80014f4:	461a      	mov	r2, r3
 80014f6:	460b      	mov	r3, r1
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	8013      	strh	r3, [r2, #0]
 80014fc:	e03a      	b.n	8001574 <main+0x254>

												}
												//if counter = 2 add dash to data
												else if (counter == 2) {
 80014fe:	4b64      	ldr	r3, [pc, #400]	; (8001690 <main+0x370>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d113      	bne.n	800152e <main+0x20e>
													strcpy(morse, "_");
 8001506:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800150a:	225f      	movs	r2, #95	; 0x5f
 800150c:	801a      	strh	r2, [r3, #0]
													strcat(recorded, "_");
 800150e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe fe5c 	bl	80001d0 <strlen>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001520:	4413      	add	r3, r2
 8001522:	495d      	ldr	r1, [pc, #372]	; (8001698 <main+0x378>)
 8001524:	461a      	mov	r2, r3
 8001526:	460b      	mov	r3, r1
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	8013      	strh	r3, [r2, #0]
 800152c:	e022      	b.n	8001574 <main+0x254>

												}
												//if counter = 3 add pause as p to data
												else if (counter == 3) {
 800152e:	4b58      	ldr	r3, [pc, #352]	; (8001690 <main+0x370>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d113      	bne.n	800155e <main+0x23e>
													strcpy(morse, " ");
 8001536:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800153a:	2220      	movs	r2, #32
 800153c:	801a      	strh	r2, [r3, #0]
													strcat(recorded, " ");
 800153e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe fe44 	bl	80001d0 <strlen>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001550:	4413      	add	r3, r2
 8001552:	4952      	ldr	r1, [pc, #328]	; (800169c <main+0x37c>)
 8001554:	461a      	mov	r2, r3
 8001556:	460b      	mov	r3, r1
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	8013      	strh	r3, [r2, #0]
 800155c:	e00a      	b.n	8001574 <main+0x254>

												} else if (counter == 4) {
 800155e:	4b4c      	ldr	r3, [pc, #304]	; (8001690 <main+0x370>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b04      	cmp	r3, #4
 8001564:	d106      	bne.n	8001574 <main+0x254>
													breakout = 1;
 8001566:	2301      	movs	r3, #1
 8001568:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
													counter = 0;
 800156c:	4b48      	ldr	r3, [pc, #288]	; (8001690 <main+0x370>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
													break;
 8001572:	e026      	b.n	80015c2 <main+0x2a2>
												}
												//transmit
												HAL_UART_Transmit(&huart1,
														(uint8_t*) morse,
														(uint16_t) strlen(
 8001574:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe fe29 	bl	80001d0 <strlen>
 800157e:	4603      	mov	r3, r0
												HAL_UART_Transmit(&huart1,
 8001580:	b29a      	uxth	r2, r3
 8001582:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 8001586:	4b41      	ldr	r3, [pc, #260]	; (800168c <main+0x36c>)
 8001588:	483a      	ldr	r0, [pc, #232]	; (8001674 <main+0x354>)
 800158a:	f003 f9f7 	bl	800497c <HAL_UART_Transmit>
																morse), 100000);
												//reset counter
												counter = 0;
 800158e:	4b40      	ldr	r3, [pc, #256]	; (8001690 <main+0x370>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
												break;
 8001594:	e015      	b.n	80015c2 <main+0x2a2>
											}
										}
									} else if (breakout == 1) {
 8001596:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 800159a:	2b01      	cmp	r3, #1
 800159c:	d055      	beq.n	800164a <main+0x32a>

										break;
									}

									//terminate after 30seconds, reset counter
									else if ((HAL_GetTick() - timestart)
 800159e:	f000 ff93 	bl	80024c8 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f247 5230 	movw	r2, #30000	; 0x7530
 80015ae:	4293      	cmp	r3, r2
 80015b0:	f67f af7a 	bls.w	80014a8 <main+0x188>
											> 30000) {
										//reset counter
										counter = 0;
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <main+0x370>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
										breakout = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
										break;
 80015c0:	e044      	b.n	800164c <main+0x32c>
									if (counter == 1) {
 80015c2:	e771      	b.n	80014a8 <main+0x188>
									}
								}
							}

							//setup breakout condition check
							else if (breakout == 1) {
 80015c4:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d125      	bne.n	8001618 <main+0x2f8>
								//reset breakout
								breakout = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
								counter = 0;
 80015d2:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <main+0x370>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
								strcat(recorded, "\r\n");
 80015d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe fdf7 	bl	80001d0 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015ea:	4413      	add	r3, r2
 80015ec:	4a2c      	ldr	r2, [pc, #176]	; (80016a0 <main+0x380>)
 80015ee:	8811      	ldrh	r1, [r2, #0]
 80015f0:	7892      	ldrb	r2, [r2, #2]
 80015f2:	8019      	strh	r1, [r3, #0]
 80015f4:	709a      	strb	r2, [r3, #2]
								HAL_UART_Transmit(&huart1, (uint8_t*) msg2,
										(uint16_t) strlen(msg2), 100000);
 80015f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fde8 	bl	80001d0 <strlen>
 8001600:	4603      	mov	r3, r0
								HAL_UART_Transmit(&huart1, (uint8_t*) msg2,
 8001602:	b29a      	uxth	r2, r3
 8001604:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <main+0x36c>)
 800160a:	481a      	ldr	r0, [pc, #104]	; (8001674 <main+0x354>)
 800160c:	f003 f9b6 	bl	800497c <HAL_UART_Transmit>
								stmsg = 1;
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <main+0x364>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]
								break;
 8001616:	e01a      	b.n	800164e <main+0x32e>
							}
							//////////////////////////////

							//if counter =2  listen
							else if (counter == 2) {
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <main+0x370>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b02      	cmp	r3, #2
 800161e:	f47f af1c 	bne.w	800145a <main+0x13a>
								HAL_UART_Transmit(&huart1, (uint8_t*) recorded,
										(uint16_t) strlen(recorded), 100000);
 8001622:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fdd2 	bl	80001d0 <strlen>
 800162c:	4603      	mov	r3, r0
								HAL_UART_Transmit(&huart1, (uint8_t*) recorded,
 800162e:	b29a      	uxth	r2, r3
 8001630:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001634:	4b15      	ldr	r3, [pc, #84]	; (800168c <main+0x36c>)
 8001636:	480f      	ldr	r0, [pc, #60]	; (8001674 <main+0x354>)
 8001638:	f003 f9a0 	bl	800497c <HAL_UART_Transmit>
								counter = 0;
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <main+0x370>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
								stmsg = 1;
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <main+0x364>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]
								break;
 8001648:	e001      	b.n	800164e <main+0x32e>
										break;
 800164a:	bf00      	nop
						checkCounter++;
 800164c:	e705      	b.n	800145a <main+0x13a>
			while (open) {
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <main+0x368>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	f47f aed7 	bne.w	8001406 <main+0xe6>
 8001658:	e6b6      	b.n	80013c8 <main+0xa8>
			continue;
 800165a:	bf00      	nop
		HAL_ResumeTick();
 800165c:	e6b4      	b.n	80013c8 <main+0xa8>
 800165e:	bf00      	nop
 8001660:	08006238 	.word	0x08006238
 8001664:	080062a0 	.word	0x080062a0
 8001668:	080062b0 	.word	0x080062b0
 800166c:	080062c8 	.word	0x080062c8
 8001670:	20000194 	.word	0x20000194
 8001674:	200001a0 	.word	0x200001a0
 8001678:	200000d4 	.word	0x200000d4
 800167c:	08006228 	.word	0x08006228
 8001680:	080061a8 	.word	0x080061a8
 8001684:	20000004 	.word	0x20000004
 8001688:	200000d8 	.word	0x200000d8
 800168c:	000186a0 	.word	0x000186a0
 8001690:	200000dc 	.word	0x200000dc
 8001694:	08006308 	.word	0x08006308
 8001698:	0800630c 	.word	0x0800630c
 800169c:	08006310 	.word	0x08006310
 80016a0:	08006314 	.word	0x08006314

080016a4 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2224      	movs	r2, #36	; 0x24
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f004 f945 	bl	8005940 <memset>
	/* USER CODE BEGIN DAC1_Init 1 */

	/* USER CODE END DAC1_Init 1 */
	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_DAC1_Init+0x5c>)
 80016b8:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MX_DAC1_Init+0x60>)
 80016ba:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80016bc:	4810      	ldr	r0, [pc, #64]	; (8001700 <MX_DAC1_Init+0x5c>)
 80016be:	f001 f864 	bl	800278a <HAL_DAC_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_DAC1_Init+0x28>
		Error_Handler();
 80016c8:	f000 f8dc 	bl	8001884 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <MX_DAC1_Init+0x5c>)
 80016e8:	f001 f8e3 	bl	80028b2 <HAL_DAC_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_DAC1_Init+0x52>
		Error_Handler();
 80016f2:	f000 f8c7 	bl	8001884 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	; 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000134 	.word	0x20000134
 8001704:	40007400 	.word	0x40007400

08001708 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <MX_I2C2_Init+0x74>)
 800170e:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <MX_I2C2_Init+0x78>)
 8001710:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10909CEC;
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_I2C2_Init+0x74>)
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <MX_I2C2_Init+0x7c>)
 8001716:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_I2C2_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <MX_I2C2_Init+0x74>)
 8001720:	2201      	movs	r2, #1
 8001722:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_I2C2_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_I2C2_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_I2C2_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_I2C2_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_I2C2_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001742:	480e      	ldr	r0, [pc, #56]	; (800177c <MX_I2C2_Init+0x74>)
 8001744:	f001 fc86 	bl	8003054 <HAL_I2C_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_I2C2_Init+0x4a>
		Error_Handler();
 800174e:	f000 f899 	bl	8001884 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8001752:	2100      	movs	r1, #0
 8001754:	4809      	ldr	r0, [pc, #36]	; (800177c <MX_I2C2_Init+0x74>)
 8001756:	f002 fa0f 	bl	8003b78 <HAL_I2CEx_ConfigAnalogFilter>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001760:	f000 f890 	bl	8001884 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8001764:	2100      	movs	r1, #0
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_I2C2_Init+0x74>)
 8001768:	f002 fa51 	bl	8003c0e <HAL_I2CEx_ConfigDigitalFilter>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_I2C2_Init+0x6e>
		Error_Handler();
 8001772:	f000 f887 	bl	8001884 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000148 	.word	0x20000148
 8001780:	40005800 	.word	0x40005800
 8001784:	10909cec 	.word	0x10909cec

08001788 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <MX_USART1_UART_Init+0x58>)
 800178e:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <MX_USART1_UART_Init+0x5c>)
 8001790:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <MX_USART1_UART_Init+0x58>)
 8001794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001798:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_USART1_UART_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_USART1_UART_Init+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_USART1_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_USART1_UART_Init+0x58>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_USART1_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_USART1_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_USART1_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_USART1_UART_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_USART1_UART_Init+0x58>)
 80017cc:	f003 f888 	bl	80048e0 <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80017d6:	f000 f855 	bl	8001884 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200001a0 	.word	0x200001a0
 80017e4:	40013800 	.word	0x40013800

080017e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_GPIO_Init+0x94>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a1e      	ldr	r2, [pc, #120]	; (800187c <MX_GPIO_Init+0x94>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <MX_GPIO_Init+0x94>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <MX_GPIO_Init+0x94>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4a18      	ldr	r2, [pc, #96]	; (800187c <MX_GPIO_Init+0x94>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_GPIO_Init+0x94>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <MX_GPIO_Init+0x94>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <MX_GPIO_Init+0x94>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <MX_GPIO_Init+0x94>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800184a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800184c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001850:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4619      	mov	r1, r3
 800185c:	4808      	ldr	r0, [pc, #32]	; (8001880 <MX_GPIO_Init+0x98>)
 800185e:	f001 f943 	bl	8002ae8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	2028      	movs	r0, #40	; 0x28
 8001868:	f000 ff59 	bl	800271e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800186c:	2028      	movs	r0, #40	; 0x28
 800186e:	f000 ff72 	bl	8002756 <HAL_NVIC_EnableIRQ>

}
 8001872:	bf00      	nop
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	48000800 	.word	0x48000800

08001884 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800188c:	e7fe      	b.n	800188c <Error_Handler+0x8>
	...

08001890 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <I2Cx_MspInit+0xa8>)
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	4a26      	ldr	r2, [pc, #152]	; (8001938 <I2Cx_MspInit+0xa8>)
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <I2Cx_MspInit+0xa8>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80018b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018b4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80018b6:	2312      	movs	r3, #18
 80018b8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80018c2:	2304      	movs	r3, #4
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	481b      	ldr	r0, [pc, #108]	; (800193c <I2Cx_MspInit+0xac>)
 80018ce:	f001 f90b 	bl	8002ae8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	4818      	ldr	r0, [pc, #96]	; (800193c <I2Cx_MspInit+0xac>)
 80018da:	f001 f905 	bl	8002ae8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <I2Cx_MspInit+0xa8>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	4a15      	ldr	r2, [pc, #84]	; (8001938 <I2Cx_MspInit+0xa8>)
 80018e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <I2Cx_MspInit+0xa8>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <I2Cx_MspInit+0xa8>)
 80018f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <I2Cx_MspInit+0xa8>)
 80018fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001900:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <I2Cx_MspInit+0xa8>)
 8001904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001906:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <I2Cx_MspInit+0xa8>)
 8001908:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800190c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	210f      	movs	r1, #15
 8001912:	2021      	movs	r0, #33	; 0x21
 8001914:	f000 ff03 	bl	800271e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001918:	2021      	movs	r0, #33	; 0x21
 800191a:	f000 ff1c 	bl	8002756 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	210f      	movs	r1, #15
 8001922:	2022      	movs	r0, #34	; 0x22
 8001924:	f000 fefb 	bl	800271e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001928:	2022      	movs	r0, #34	; 0x22
 800192a:	f000 ff14 	bl	8002756 <HAL_NVIC_EnableIRQ>
}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	48000400 	.word	0x48000400

08001940 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <I2Cx_Init+0x54>)
 800194c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a11      	ldr	r2, [pc, #68]	; (8001998 <I2Cx_Init+0x58>)
 8001952:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ff89 	bl	8001890 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f001 fb68 	bl	8003054 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001984:	2100      	movs	r1, #0
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f002 f8f6 	bl	8003b78 <HAL_I2CEx_ConfigAnalogFilter>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40005800 	.word	0x40005800
 8001998:	00702681 	.word	0x00702681

0800199c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af04      	add	r7, sp, #16
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	4608      	mov	r0, r1
 80019a6:	4611      	mov	r1, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	4603      	mov	r3, r0
 80019ac:	72fb      	strb	r3, [r7, #11]
 80019ae:	460b      	mov	r3, r1
 80019b0:	813b      	strh	r3, [r7, #8]
 80019b2:	4613      	mov	r3, r2
 80019b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019ba:	7afb      	ldrb	r3, [r7, #11]
 80019bc:	b299      	uxth	r1, r3
 80019be:	88f8      	ldrh	r0, [r7, #6]
 80019c0:	893a      	ldrh	r2, [r7, #8]
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	9302      	str	r3, [sp, #8]
 80019c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	4603      	mov	r3, r0
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f001 fd10 	bl	80033f8 <HAL_I2C_Mem_Read>
 80019d8:	4603      	mov	r3, r0
 80019da:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80019e2:	7afb      	ldrb	r3, [r7, #11]
 80019e4:	4619      	mov	r1, r3
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f832 	bl	8001a50 <I2Cx_Error>
  }
  return status;
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b08a      	sub	sp, #40	; 0x28
 80019fa:	af04      	add	r7, sp, #16
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	4608      	mov	r0, r1
 8001a00:	4611      	mov	r1, r2
 8001a02:	461a      	mov	r2, r3
 8001a04:	4603      	mov	r3, r0
 8001a06:	72fb      	strb	r3, [r7, #11]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	813b      	strh	r3, [r7, #8]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a14:	7afb      	ldrb	r3, [r7, #11]
 8001a16:	b299      	uxth	r1, r3
 8001a18:	88f8      	ldrh	r0, [r7, #6]
 8001a1a:	893a      	ldrh	r2, [r7, #8]
 8001a1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a20:	9302      	str	r3, [sp, #8]
 8001a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f001 fbcf 	bl	80031d0 <HAL_I2C_Mem_Write>
 8001a32:	4603      	mov	r3, r0
 8001a34:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a36:	7dfb      	ldrb	r3, [r7, #23]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d004      	beq.n	8001a46 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f000 f805 	bl	8001a50 <I2Cx_Error>
  }
  return status;
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f001 fb88 	bl	8003172 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff6c 	bl	8001940 <I2Cx_Init>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <SENSOR_IO_Init+0x10>)
 8001a76:	f7ff ff63 	bl	8001940 <I2Cx_Init>
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200002c4 	.word	0x200002c4

08001a84 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	71bb      	strb	r3, [r7, #6]
 8001a92:	4613      	mov	r3, r2
 8001a94:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001a96:	79bb      	ldrb	r3, [r7, #6]
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	79f9      	ldrb	r1, [r7, #7]
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	1d7b      	adds	r3, r7, #5
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <SENSOR_IO_Write+0x30>)
 8001aa8:	f7ff ffa5 	bl	80019f6 <I2Cx_WriteMultiple>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200002c4 	.word	0x200002c4

08001ab8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460a      	mov	r2, r1
 8001ac2:	71fb      	strb	r3, [r7, #7]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001acc:	79bb      	ldrb	r3, [r7, #6]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	79f9      	ldrb	r1, [r7, #7]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	f107 030f 	add.w	r3, r7, #15
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2301      	movs	r3, #1
 8001ade:	4804      	ldr	r0, [pc, #16]	; (8001af0 <SENSOR_IO_Read+0x38>)
 8001ae0:	f7ff ff5c 	bl	800199c <I2Cx_ReadMultiple>

  return read_value;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200002c4 	.word	0x200002c4

08001af4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	603a      	str	r2, [r7, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
 8001b02:	460b      	mov	r3, r1
 8001b04:	71bb      	strb	r3, [r7, #6]
 8001b06:	4613      	mov	r3, r2
 8001b08:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001b0a:	79bb      	ldrb	r3, [r7, #6]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	79f9      	ldrb	r1, [r7, #7]
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	4804      	ldr	r0, [pc, #16]	; (8001b2c <SENSOR_IO_ReadMultiple+0x38>)
 8001b1c:	f7ff ff3e 	bl	800199c <I2Cx_ReadMultiple>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b29b      	uxth	r3, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200002c4 	.word	0x200002c4

08001b30 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <BSP_ACCELERO_Init+0x74>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	4798      	blx	r3
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b6a      	cmp	r3, #106	; 0x6a
 8001b48:	d002      	beq.n	8001b50 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
 8001b4e:	e024      	b.n	8001b9a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <BSP_ACCELERO_Init+0x78>)
 8001b52:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <BSP_ACCELERO_Init+0x74>)
 8001b54:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001b56:	2330      	movs	r3, #48	; 0x30
 8001b58:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001b62:	2340      	movs	r3, #64	; 0x40
 8001b64:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001b6e:	797a      	ldrb	r2, [r7, #5]
 8001b70:	7abb      	ldrb	r3, [r7, #10]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001b78:	7a3b      	ldrb	r3, [r7, #8]
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	b21a      	sxth	r2, r3
 8001b84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <BSP_ACCELERO_Init+0x78>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	89ba      	ldrh	r2, [r7, #12]
 8001b96:	4610      	mov	r0, r2
 8001b98:	4798      	blx	r3
  }  

  return ret;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000018 	.word	0x20000018
 8001ba8:	200000e8 	.word	0x200000e8

08001bac <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d009      	beq.n	8001bd0 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	4798      	blx	r3
    }
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200000e8 	.word	0x200000e8

08001bdc <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <BSP_HSENSOR_Init+0x38>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	20be      	movs	r0, #190	; 0xbe
 8001be8:	4798      	blx	r3
 8001bea:	4603      	mov	r3, r0
 8001bec:	2bbc      	cmp	r3, #188	; 0xbc
 8001bee:	d002      	beq.n	8001bf6 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	e009      	b.n	8001c0a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <BSP_HSENSOR_Init+0x3c>)
 8001bf8:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <BSP_HSENSOR_Init+0x38>)
 8001bfa:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <BSP_HSENSOR_Init+0x3c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	20be      	movs	r0, #190	; 0xbe
 8001c04:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001c0a:	687b      	ldr	r3, [r7, #4]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	2000000c 	.word	0x2000000c
 8001c18:	200000ec 	.word	0x200000ec

08001c1c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	20be      	movs	r0, #190	; 0xbe
 8001c28:	4798      	blx	r3
 8001c2a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200000ec 	.word	0x200000ec

08001c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <HAL_MspInit+0x44>)
 8001c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c42:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <HAL_MspInit+0x44>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6613      	str	r3, [r2, #96]	; 0x60
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_MspInit+0x44>)
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_MspInit+0x44>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	4a08      	ldr	r2, [pc, #32]	; (8001c7c <HAL_MspInit+0x44>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6593      	str	r3, [r2, #88]	; 0x58
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_MspInit+0x44>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000

08001c80 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <HAL_DAC_MspInit+0x74>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d124      	bne.n	8001cec <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_DAC_MspInit+0x78>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	4a14      	ldr	r2, [pc, #80]	; (8001cf8 <HAL_DAC_MspInit+0x78>)
 8001ca8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cac:	6593      	str	r3, [r2, #88]	; 0x58
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_DAC_MspInit+0x78>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <HAL_DAC_MspInit+0x78>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <HAL_DAC_MspInit+0x78>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_DAC_MspInit+0x78>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cd2:	2310      	movs	r3, #16
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce8:	f000 fefe 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40007400 	.word	0x40007400
 8001cf8:	40021000 	.word	0x40021000

08001cfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b0ac      	sub	sp, #176	; 0xb0
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2288      	movs	r2, #136	; 0x88
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fe0f 	bl	8005940 <memset>
  if(hi2c->Instance==I2C2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a21      	ldr	r2, [pc, #132]	; (8001dac <HAL_I2C_MspInit+0xb0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d13b      	bne.n	8001da4 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f002 f915 	bl	8003f68 <HAL_RCCEx_PeriphCLKConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d44:	f7ff fd9e 	bl	8001884 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_I2C_MspInit+0xb4>)
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4c:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <HAL_I2C_MspInit+0xb4>)
 8001d4e:	f043 0302 	orr.w	r3, r3, #2
 8001d52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_I2C_MspInit+0xb4>)
 8001d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d68:	2312      	movs	r3, #18
 8001d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d84:	4619      	mov	r1, r3
 8001d86:	480b      	ldr	r0, [pc, #44]	; (8001db4 <HAL_I2C_MspInit+0xb8>)
 8001d88:	f000 feae 	bl	8002ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_I2C_MspInit+0xb4>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <HAL_I2C_MspInit+0xb4>)
 8001d92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d96:	6593      	str	r3, [r2, #88]	; 0x58
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_I2C_MspInit+0xb4>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001da4:	bf00      	nop
 8001da6:	37b0      	adds	r7, #176	; 0xb0
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40005800 	.word	0x40005800
 8001db0:	40021000 	.word	0x40021000
 8001db4:	48000400 	.word	0x48000400

08001db8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_I2C_MspDeInit+0x3c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10f      	bne.n	8001dea <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_I2C_MspDeInit+0x40>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_I2C_MspDeInit+0x40>)
 8001dd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dd4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001dd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dda:	4808      	ldr	r0, [pc, #32]	; (8001dfc <HAL_I2C_MspDeInit+0x44>)
 8001ddc:	f001 f82e 	bl	8002e3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001de0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001de4:	4805      	ldr	r0, [pc, #20]	; (8001dfc <HAL_I2C_MspDeInit+0x44>)
 8001de6:	f001 f829 	bl	8002e3c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40005800 	.word	0x40005800
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	48000400 	.word	0x48000400

08001e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0ac      	sub	sp, #176	; 0xb0
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2288      	movs	r2, #136	; 0x88
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 fd8d 	bl	8005940 <memset>
  if(huart->Instance==USART1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <HAL_UART_MspInit+0xb0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d13a      	bne.n	8001ea6 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e34:	2300      	movs	r3, #0
 8001e36:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 f893 	bl	8003f68 <HAL_RCCEx_PeriphCLKConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e48:	f7ff fd1c 	bl	8001884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e4c:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_UART_MspInit+0xb4>)
 8001e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e50:	4a18      	ldr	r2, [pc, #96]	; (8001eb4 <HAL_UART_MspInit+0xb4>)
 8001e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e56:	6613      	str	r3, [r2, #96]	; 0x60
 8001e58:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <HAL_UART_MspInit+0xb4>)
 8001e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_UART_MspInit+0xb4>)
 8001e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e68:	4a12      	ldr	r2, [pc, #72]	; (8001eb4 <HAL_UART_MspInit+0xb4>)
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e70:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_UART_MspInit+0xb4>)
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e7c:	23c0      	movs	r3, #192	; 0xc0
 8001e7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e94:	2307      	movs	r3, #7
 8001e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <HAL_UART_MspInit+0xb8>)
 8001ea2:	f000 fe21 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ea6:	bf00      	nop
 8001ea8:	37b0      	adds	r7, #176	; 0xb0
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40013800 	.word	0x40013800
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	48000400 	.word	0x48000400

08001ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <NMI_Handler+0x4>

08001ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <HardFault_Handler+0x4>

08001ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <MemManage_Handler+0x4>

08001ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <BusFault_Handler+0x4>

08001ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <UsageFault_Handler+0x4>

08001eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f08:	f000 faca 	bl	80024a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f18:	f001 f884 	bl	8003024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f28:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <_sbrk+0x5c>)
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <_sbrk+0x60>)
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <_sbrk+0x64>)
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <_sbrk+0x68>)
 8001f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d207      	bcs.n	8001f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f50:	f003 fcbe 	bl	80058d0 <__errno>
 8001f54:	4603      	mov	r3, r0
 8001f56:	220c      	movs	r2, #12
 8001f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f5e:	e009      	b.n	8001f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <_sbrk+0x64>)
 8001f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f72:	68fb      	ldr	r3, [r7, #12]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20018000 	.word	0x20018000
 8001f80:	00000400 	.word	0x00000400
 8001f84:	200000f0 	.word	0x200000f0
 8001f88:	20000328 	.word	0x20000328

08001f8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <SystemInit+0x20>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	4a05      	ldr	r2, [pc, #20]	; (8001fac <SystemInit+0x20>)
 8001f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb4:	f7ff ffea 	bl	8001f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb8:	480c      	ldr	r0, [pc, #48]	; (8001fec <LoopForever+0x6>)
  ldr r1, =_edata
 8001fba:	490d      	ldr	r1, [pc, #52]	; (8001ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <LoopForever+0xe>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc0:	e002      	b.n	8001fc8 <LoopCopyDataInit>

08001fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc6:	3304      	adds	r3, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fcc:	d3f9      	bcc.n	8001fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fd0:	4c0a      	ldr	r4, [pc, #40]	; (8001ffc <LoopForever+0x16>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd4:	e001      	b.n	8001fda <LoopFillZerobss>

08001fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd8:	3204      	adds	r2, #4

08001fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fdc:	d3fb      	bcc.n	8001fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fde:	f003 fc7d 	bl	80058dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fe2:	f7ff f99d 	bl	8001320 <main>

08001fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fe6:	e7fe      	b.n	8001fe6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fe8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff0:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001ff4:	08006b98 	.word	0x08006b98
  ldr r2, =_sbss
 8001ff8:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001ffc:	20000324 	.word	0x20000324

08002000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002000:	e7fe      	b.n	8002000 <ADC1_2_IRQHandler>

08002002 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2120      	movs	r1, #32
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fd50 	bl	8001ab8 <SENSOR_IO_Read>
 8002018:	4603      	mov	r3, r0
 800201a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	f023 0304 	bic.w	r3, r3, #4
 8002022:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002042:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	2120      	movs	r1, #32
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fd19 	bl	8001a84 <SENSOR_IO_Write>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002068:	f7ff fd02 	bl	8001a70 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	210f      	movs	r1, #15
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fd20 	bl	8001ab8 <SENSOR_IO_Read>
 8002078:	4603      	mov	r3, r0
 800207a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	b2d8      	uxtb	r0, r3
 8002096:	f107 020c 	add.w	r2, r7, #12
 800209a:	2302      	movs	r3, #2
 800209c:	21b0      	movs	r1, #176	; 0xb0
 800209e:	f7ff fd29 	bl	8001af4 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80020a2:	7b3b      	ldrb	r3, [r7, #12]
 80020a4:	085b      	lsrs	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80020aa:	7b7b      	ldrb	r3, [r7, #13]
 80020ac:	085b      	lsrs	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	b2d8      	uxtb	r0, r3
 80020b6:	f107 020c 	add.w	r2, r7, #12
 80020ba:	2302      	movs	r3, #2
 80020bc:	21b6      	movs	r1, #182	; 0xb6
 80020be:	f7ff fd19 	bl	8001af4 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80020c2:	7b7b      	ldrb	r3, [r7, #13]
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	b21a      	sxth	r2, r3
 80020c8:	7b3b      	ldrb	r3, [r7, #12]
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	4313      	orrs	r3, r2
 80020ce:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	b2d8      	uxtb	r0, r3
 80020d4:	f107 020c 	add.w	r2, r7, #12
 80020d8:	2302      	movs	r3, #2
 80020da:	21ba      	movs	r1, #186	; 0xba
 80020dc:	f7ff fd0a 	bl	8001af4 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80020e0:	7b7b      	ldrb	r3, [r7, #13]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	b21a      	sxth	r2, r3
 80020e6:	7b3b      	ldrb	r3, [r7, #12]
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	4313      	orrs	r3, r2
 80020ec:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	b2d8      	uxtb	r0, r3
 80020f2:	f107 020c 	add.w	r2, r7, #12
 80020f6:	2302      	movs	r3, #2
 80020f8:	21a8      	movs	r1, #168	; 0xa8
 80020fa:	f7ff fcfb 	bl	8001af4 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80020fe:	7b7b      	ldrb	r3, [r7, #13]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	b21a      	sxth	r2, r3
 8002104:	7b3b      	ldrb	r3, [r7, #12]
 8002106:	b21b      	sxth	r3, r3
 8002108:	4313      	orrs	r3, r2
 800210a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800210c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002110:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002122:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	ee07 3a90 	vmov	s15, r3
 800212c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002130:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002134:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002138:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800214a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800215e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002162:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800216a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800216e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002172:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80021b8 <HTS221_H_ReadHumidity+0x130>
 8002176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	dd01      	ble.n	8002184 <HTS221_H_ReadHumidity+0xfc>
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HTS221_H_ReadHumidity+0x134>)
 8002182:	e00a      	b.n	800219a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002184:	edd7 7a04 	vldr	s15, [r7, #16]
 8002188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002190:	d502      	bpl.n	8002198 <HTS221_H_ReadHumidity+0x110>
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	e000      	b.n	800219a <HTS221_H_ReadHumidity+0x112>
 8002198:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800219a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800219c:	edd7 7a04 	vldr	s15, [r7, #16]
 80021a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021a8:	eef0 7a66 	vmov.f32	s15, s13
}
 80021ac:	eeb0 0a67 	vmov.f32	s0, s15
 80021b0:	3720      	adds	r7, #32
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	447a0000 	.word	0x447a0000
 80021bc:	447a0000 	.word	0x447a0000

080021c0 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80021ca:	2300      	movs	r3, #0
 80021cc:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80021ce:	2110      	movs	r1, #16
 80021d0:	20d4      	movs	r0, #212	; 0xd4
 80021d2:	f7ff fc71 	bl	8001ab8 <SENSOR_IO_Read>
 80021d6:	4603      	mov	r3, r0
 80021d8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80021de:	7bbb      	ldrb	r3, [r7, #14]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80021e6:	7bba      	ldrb	r2, [r7, #14]
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80021ee:	7bbb      	ldrb	r3, [r7, #14]
 80021f0:	461a      	mov	r2, r3
 80021f2:	2110      	movs	r1, #16
 80021f4:	20d4      	movs	r0, #212	; 0xd4
 80021f6:	f7ff fc45 	bl	8001a84 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80021fa:	2112      	movs	r1, #18
 80021fc:	20d4      	movs	r0, #212	; 0xd4
 80021fe:	f7ff fc5b 	bl	8001ab8 <SENSOR_IO_Read>
 8002202:	4603      	mov	r3, r0
 8002204:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	b29b      	uxth	r3, r3
 800220c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800220e:	7bbb      	ldrb	r3, [r7, #14]
 8002210:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002214:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002216:	7bba      	ldrb	r2, [r7, #14]
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	4313      	orrs	r3, r2
 800221c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800221e:	7bbb      	ldrb	r3, [r7, #14]
 8002220:	461a      	mov	r2, r3
 8002222:	2112      	movs	r1, #18
 8002224:	20d4      	movs	r0, #212	; 0xd4
 8002226:	f7ff fc2d 	bl	8001a84 <SENSOR_IO_Write>
}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002238:	2300      	movs	r3, #0
 800223a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800223c:	2110      	movs	r1, #16
 800223e:	20d4      	movs	r0, #212	; 0xd4
 8002240:	f7ff fc3a 	bl	8001ab8 <SENSOR_IO_Read>
 8002244:	4603      	mov	r3, r0
 8002246:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	461a      	mov	r2, r3
 8002254:	2110      	movs	r1, #16
 8002256:	20d4      	movs	r0, #212	; 0xd4
 8002258:	f7ff fc14 	bl	8001a84 <SENSOR_IO_Write>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002268:	f7ff fc02 	bl	8001a70 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800226c:	210f      	movs	r1, #15
 800226e:	20d4      	movs	r0, #212	; 0xd4
 8002270:	f7ff fc22 	bl	8001ab8 <SENSOR_IO_Read>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	bd80      	pop	{r7, pc}

0800227a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002288:	2115      	movs	r1, #21
 800228a:	20d4      	movs	r0, #212	; 0xd4
 800228c:	f7ff fc14 	bl	8001ab8 <SENSOR_IO_Read>
 8002290:	4603      	mov	r3, r0
 8002292:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	f023 0310 	bic.w	r3, r3, #16
 800229a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	461a      	mov	r2, r3
 80022ae:	2115      	movs	r1, #21
 80022b0:	20d4      	movs	r0, #212	; 0xd4
 80022b2:	f7ff fbe7 	bl	8001a84 <SENSOR_IO_Write>
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80022d6:	2110      	movs	r1, #16
 80022d8:	20d4      	movs	r0, #212	; 0xd4
 80022da:	f7ff fbed 	bl	8001ab8 <SENSOR_IO_Read>
 80022de:	4603      	mov	r3, r0
 80022e0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80022e2:	f107 0208 	add.w	r2, r7, #8
 80022e6:	2306      	movs	r3, #6
 80022e8:	2128      	movs	r1, #40	; 0x28
 80022ea:	20d4      	movs	r0, #212	; 0xd4
 80022ec:	f7ff fc02 	bl	8001af4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	77fb      	strb	r3, [r7, #31]
 80022f4:	e01f      	b.n	8002336 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80022f6:	7ffb      	ldrb	r3, [r7, #31]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	3301      	adds	r3, #1
 80022fc:	f107 0220 	add.w	r2, r7, #32
 8002300:	4413      	add	r3, r2
 8002302:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002306:	b29b      	uxth	r3, r3
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	b29a      	uxth	r2, r3
 800230c:	7ffb      	ldrb	r3, [r7, #31]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	f107 0120 	add.w	r1, r7, #32
 8002314:	440b      	add	r3, r1
 8002316:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4413      	add	r3, r2
 800231e:	b29a      	uxth	r2, r3
 8002320:	7ffb      	ldrb	r3, [r7, #31]
 8002322:	b212      	sxth	r2, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	f107 0120 	add.w	r1, r7, #32
 800232a:	440b      	add	r3, r1
 800232c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002330:	7ffb      	ldrb	r3, [r7, #31]
 8002332:	3301      	adds	r3, #1
 8002334:	77fb      	strb	r3, [r7, #31]
 8002336:	7ffb      	ldrb	r3, [r7, #31]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d9dc      	bls.n	80022f6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800233c:	7dfb      	ldrb	r3, [r7, #23]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d828      	bhi.n	8002398 <LSM6DSL_AccReadXYZ+0xd8>
 8002346:	a201      	add	r2, pc, #4	; (adr r2, 800234c <LSM6DSL_AccReadXYZ+0x8c>)
 8002348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234c:	08002381 	.word	0x08002381
 8002350:	08002399 	.word	0x08002399
 8002354:	08002399 	.word	0x08002399
 8002358:	08002399 	.word	0x08002399
 800235c:	08002393 	.word	0x08002393
 8002360:	08002399 	.word	0x08002399
 8002364:	08002399 	.word	0x08002399
 8002368:	08002399 	.word	0x08002399
 800236c:	08002387 	.word	0x08002387
 8002370:	08002399 	.word	0x08002399
 8002374:	08002399 	.word	0x08002399
 8002378:	08002399 	.word	0x08002399
 800237c:	0800238d 	.word	0x0800238d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <LSM6DSL_AccReadXYZ+0x128>)
 8002382:	61bb      	str	r3, [r7, #24]
    break;
 8002384:	e008      	b.n	8002398 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002386:	4b19      	ldr	r3, [pc, #100]	; (80023ec <LSM6DSL_AccReadXYZ+0x12c>)
 8002388:	61bb      	str	r3, [r7, #24]
    break;
 800238a:	e005      	b.n	8002398 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <LSM6DSL_AccReadXYZ+0x130>)
 800238e:	61bb      	str	r3, [r7, #24]
    break;
 8002390:	e002      	b.n	8002398 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <LSM6DSL_AccReadXYZ+0x134>)
 8002394:	61bb      	str	r3, [r7, #24]
    break;    
 8002396:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002398:	2300      	movs	r3, #0
 800239a:	77fb      	strb	r3, [r7, #31]
 800239c:	e01b      	b.n	80023d6 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800239e:	7ffb      	ldrb	r3, [r7, #31]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	f107 0220 	add.w	r2, r7, #32
 80023a6:	4413      	add	r3, r2
 80023a8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80023ac:	ee07 3a90 	vmov	s15, r3
 80023b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80023b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023bc:	7ffb      	ldrb	r3, [r7, #31]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c8:	ee17 2a90 	vmov	r2, s15
 80023cc:	b212      	sxth	r2, r2
 80023ce:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80023d0:	7ffb      	ldrb	r3, [r7, #31]
 80023d2:	3301      	adds	r3, #1
 80023d4:	77fb      	strb	r3, [r7, #31]
 80023d6:	7ffb      	ldrb	r3, [r7, #31]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d9e0      	bls.n	800239e <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3720      	adds	r7, #32
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	3d79db23 	.word	0x3d79db23
 80023ec:	3df9db23 	.word	0x3df9db23
 80023f0:	3e79db23 	.word	0x3e79db23
 80023f4:	3ef9db23 	.word	0x3ef9db23

080023f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002402:	2003      	movs	r0, #3
 8002404:	f000 f980 	bl	8002708 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002408:	2000      	movs	r0, #0
 800240a:	f000 f80d 	bl	8002428 <HAL_InitTick>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	71fb      	strb	r3, [r7, #7]
 8002418:	e001      	b.n	800241e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800241a:	f7ff fc0d 	bl	8001c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800241e:	79fb      	ldrb	r3, [r7, #7]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002434:	4b17      	ldr	r3, [pc, #92]	; (8002494 <HAL_InitTick+0x6c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d023      	beq.n	8002484 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_InitTick+0x70>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_InitTick+0x6c>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244a:	fbb3 f3f1 	udiv	r3, r3, r1
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f98d 	bl	8002772 <HAL_SYSTICK_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10f      	bne.n	800247e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d809      	bhi.n	8002478 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002464:	2200      	movs	r2, #0
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800246c:	f000 f957 	bl	800271e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002470:	4a0a      	ldr	r2, [pc, #40]	; (800249c <HAL_InitTick+0x74>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e007      	b.n	8002488 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e004      	b.n	8002488 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	e001      	b.n	8002488 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000050 	.word	0x20000050
 8002498:	20000008 	.word	0x20000008
 800249c:	2000004c 	.word	0x2000004c

080024a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_IncTick+0x20>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_IncTick+0x24>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_IncTick+0x24>)
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000050 	.word	0x20000050
 80024c4:	20000310 	.word	0x20000310

080024c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return uwTick;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_GetTick+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000310 	.word	0x20000310

080024e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff ffee 	bl	80024c8 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f8:	d005      	beq.n	8002506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_Delay+0x44>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002506:	bf00      	nop
 8002508:	f7ff ffde 	bl	80024c8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f7      	bhi.n	8002508 <HAL_Delay+0x28>
  {
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000050 	.word	0x20000050

08002528 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_SuspendTick+0x1c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_SuspendTick+0x1c>)
 8002532:	f023 0302 	bic.w	r3, r3, #2
 8002536:	6013      	str	r3, [r2, #0]
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_ResumeTick+0x1c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <HAL_ResumeTick+0x1c>)
 8002552:	f043 0302 	orr.w	r3, r3, #2
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e010 	.word	0xe000e010

08002568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002584:	4013      	ands	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259a:	4a04      	ldr	r2, [pc, #16]	; (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	60d3      	str	r3, [r2, #12]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <__NVIC_GetPriorityGrouping+0x18>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	f003 0307 	and.w	r3, r3, #7
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	db0b      	blt.n	80025f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	4907      	ldr	r1, [pc, #28]	; (8002604 <__NVIC_EnableIRQ+0x38>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	2001      	movs	r0, #1
 80025ee:	fa00 f202 	lsl.w	r2, r0, r2
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000e100 	.word	0xe000e100

08002608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	2b00      	cmp	r3, #0
 800261a:	db0a      	blt.n	8002632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	490c      	ldr	r1, [pc, #48]	; (8002654 <__NVIC_SetPriority+0x4c>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	0112      	lsls	r2, r2, #4
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	440b      	add	r3, r1
 800262c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002630:	e00a      	b.n	8002648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4908      	ldr	r1, [pc, #32]	; (8002658 <__NVIC_SetPriority+0x50>)
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	3b04      	subs	r3, #4
 8002640:	0112      	lsls	r2, r2, #4
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	440b      	add	r3, r1
 8002646:	761a      	strb	r2, [r3, #24]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000e100 	.word	0xe000e100
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800265c:	b480      	push	{r7}
 800265e:	b089      	sub	sp, #36	; 0x24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f1c3 0307 	rsb	r3, r3, #7
 8002676:	2b04      	cmp	r3, #4
 8002678:	bf28      	it	cs
 800267a:	2304      	movcs	r3, #4
 800267c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3304      	adds	r3, #4
 8002682:	2b06      	cmp	r3, #6
 8002684:	d902      	bls.n	800268c <NVIC_EncodePriority+0x30>
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3b03      	subs	r3, #3
 800268a:	e000      	b.n	800268e <NVIC_EncodePriority+0x32>
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	401a      	ands	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	43d9      	mvns	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	4313      	orrs	r3, r2
         );
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3724      	adds	r7, #36	; 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d4:	d301      	bcc.n	80026da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00f      	b.n	80026fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <SysTick_Config+0x40>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e2:	210f      	movs	r1, #15
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026e8:	f7ff ff8e 	bl	8002608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <SysTick_Config+0x40>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f2:	4b04      	ldr	r3, [pc, #16]	; (8002704 <SysTick_Config+0x40>)
 80026f4:	2207      	movs	r2, #7
 80026f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	e000e010 	.word	0xe000e010

08002708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff29 	bl	8002568 <__NVIC_SetPriorityGrouping>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002730:	f7ff ff3e 	bl	80025b0 <__NVIC_GetPriorityGrouping>
 8002734:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	f7ff ff8e 	bl	800265c <NVIC_EncodePriority>
 8002740:	4602      	mov	r2, r0
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff5d 	bl	8002608 <__NVIC_SetPriority>
}
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff31 	bl	80025cc <__NVIC_EnableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ffa2 	bl	80026c4 <SysTick_Config>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e014      	b.n	80027c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	791b      	ldrb	r3, [r3, #4]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff fa67 	bl	8001c80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2202      	movs	r2, #2
 80027b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	795b      	ldrb	r3, [r3, #5]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_DAC_Start+0x16>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e03b      	b.n	800285c <HAL_DAC_Start+0x8e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6819      	ldr	r1, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2201      	movs	r2, #1
 80027fe:	409a      	lsls	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10f      	bne.n	800282e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002818:	2b04      	cmp	r3, #4
 800281a:	d118      	bne.n	800284e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	e00f      	b.n	800284e <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002838:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800283c:	d107      	bne.n	800284e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0202 	orr.w	r2, r2, #2
 800284c:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	3308      	adds	r3, #8
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e004      	b.n	800289c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	3314      	adds	r3, #20
 800289a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	461a      	mov	r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b088      	sub	sp, #32
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	795b      	ldrb	r3, [r3, #5]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_DAC_ConfigChannel+0x1c>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e107      	b.n	8002ade <HAL_DAC_ConfigChannel+0x22c>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2202      	movs	r2, #2
 80028d8:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d174      	bne.n	80029cc <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80028e2:	f7ff fdf1 	bl	80024c8 <HAL_GetTick>
 80028e6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d134      	bne.n	8002958 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028ee:	e011      	b.n	8002914 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80028f0:	f7ff fdea 	bl	80024c8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d90a      	bls.n	8002914 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f043 0208 	orr.w	r2, r3, #8
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2203      	movs	r2, #3
 800290e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0e4      	b.n	8002ade <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e6      	bne.n	80028f0 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002922:	2001      	movs	r0, #1
 8002924:	f7ff fddc 	bl	80024e0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	6992      	ldr	r2, [r2, #24]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40
 8002932:	e01e      	b.n	8002972 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002934:	f7ff fdc8 	bl	80024c8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d90a      	bls.n	8002958 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f043 0208 	orr.w	r2, r3, #8
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2203      	movs	r2, #3
 8002952:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e0c2      	b.n	8002ade <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295e:	2b00      	cmp	r3, #0
 8002960:	dbe8      	blt.n	8002934 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002962:	2001      	movs	r0, #1
 8002964:	f7ff fdbc 	bl	80024e0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	6992      	ldr	r2, [r2, #24]
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	ea02 0103 	and.w	r1, r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	409a      	lsls	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	21ff      	movs	r1, #255	; 0xff
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	ea02 0103 	and.w	r1, r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	6a1a      	ldr	r2, [r3, #32]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d11d      	bne.n	8002a10 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	221f      	movs	r2, #31
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2207      	movs	r2, #7
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	431a      	orrs	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6819      	ldr	r1, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	400a      	ands	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6819      	ldr	r1, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	22c0      	movs	r2, #192	; 0xc0
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	400a      	ands	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af6:	e17f      	b.n	8002df8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2101      	movs	r1, #1
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	fa01 f303 	lsl.w	r3, r1, r3
 8002b04:	4013      	ands	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8171 	beq.w	8002df2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d005      	beq.n	8002b28 <HAL_GPIO_Init+0x40>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d130      	bne.n	8002b8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b5e:	2201      	movs	r2, #1
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	f003 0201 	and.w	r2, r3, #1
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d118      	bne.n	8002bc8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	08db      	lsrs	r3, r3, #3
 8002bb2:	f003 0201 	and.w	r2, r3, #1
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d017      	beq.n	8002c04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d123      	bne.n	8002c58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	08da      	lsrs	r2, r3, #3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3208      	adds	r2, #8
 8002c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	220f      	movs	r2, #15
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	08da      	lsrs	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3208      	adds	r2, #8
 8002c52:	6939      	ldr	r1, [r7, #16]
 8002c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0203 	and.w	r2, r3, #3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80ac 	beq.w	8002df2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	4b5f      	ldr	r3, [pc, #380]	; (8002e18 <HAL_GPIO_Init+0x330>)
 8002c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9e:	4a5e      	ldr	r2, [pc, #376]	; (8002e18 <HAL_GPIO_Init+0x330>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ca6:	4b5c      	ldr	r3, [pc, #368]	; (8002e18 <HAL_GPIO_Init+0x330>)
 8002ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cb2:	4a5a      	ldr	r2, [pc, #360]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	089b      	lsrs	r3, r3, #2
 8002cb8:	3302      	adds	r3, #2
 8002cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	220f      	movs	r2, #15
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cdc:	d025      	beq.n	8002d2a <HAL_GPIO_Init+0x242>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4f      	ldr	r2, [pc, #316]	; (8002e20 <HAL_GPIO_Init+0x338>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d01f      	beq.n	8002d26 <HAL_GPIO_Init+0x23e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4e      	ldr	r2, [pc, #312]	; (8002e24 <HAL_GPIO_Init+0x33c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d019      	beq.n	8002d22 <HAL_GPIO_Init+0x23a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a4d      	ldr	r2, [pc, #308]	; (8002e28 <HAL_GPIO_Init+0x340>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <HAL_GPIO_Init+0x236>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a4c      	ldr	r2, [pc, #304]	; (8002e2c <HAL_GPIO_Init+0x344>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00d      	beq.n	8002d1a <HAL_GPIO_Init+0x232>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a4b      	ldr	r2, [pc, #300]	; (8002e30 <HAL_GPIO_Init+0x348>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d007      	beq.n	8002d16 <HAL_GPIO_Init+0x22e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a4a      	ldr	r2, [pc, #296]	; (8002e34 <HAL_GPIO_Init+0x34c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_GPIO_Init+0x22a>
 8002d0e:	2306      	movs	r3, #6
 8002d10:	e00c      	b.n	8002d2c <HAL_GPIO_Init+0x244>
 8002d12:	2307      	movs	r3, #7
 8002d14:	e00a      	b.n	8002d2c <HAL_GPIO_Init+0x244>
 8002d16:	2305      	movs	r3, #5
 8002d18:	e008      	b.n	8002d2c <HAL_GPIO_Init+0x244>
 8002d1a:	2304      	movs	r3, #4
 8002d1c:	e006      	b.n	8002d2c <HAL_GPIO_Init+0x244>
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e004      	b.n	8002d2c <HAL_GPIO_Init+0x244>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e002      	b.n	8002d2c <HAL_GPIO_Init+0x244>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_GPIO_Init+0x244>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	f002 0203 	and.w	r2, r2, #3
 8002d32:	0092      	lsls	r2, r2, #2
 8002d34:	4093      	lsls	r3, r2
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d3c:	4937      	ldr	r1, [pc, #220]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	089b      	lsrs	r3, r3, #2
 8002d42:	3302      	adds	r3, #2
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <HAL_GPIO_Init+0x350>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d6e:	4a32      	ldr	r2, [pc, #200]	; (8002e38 <HAL_GPIO_Init+0x350>)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d74:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <HAL_GPIO_Init+0x350>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d98:	4a27      	ldr	r2, [pc, #156]	; (8002e38 <HAL_GPIO_Init+0x350>)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <HAL_GPIO_Init+0x350>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dc2:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <HAL_GPIO_Init+0x350>)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_GPIO_Init+0x350>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dec:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <HAL_GPIO_Init+0x350>)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	3301      	adds	r3, #1
 8002df6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f47f ae78 	bne.w	8002af8 <HAL_GPIO_Init+0x10>
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	371c      	adds	r7, #28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40010000 	.word	0x40010000
 8002e20:	48000400 	.word	0x48000400
 8002e24:	48000800 	.word	0x48000800
 8002e28:	48000c00 	.word	0x48000c00
 8002e2c:	48001000 	.word	0x48001000
 8002e30:	48001400 	.word	0x48001400
 8002e34:	48001800 	.word	0x48001800
 8002e38:	40010400 	.word	0x40010400

08002e3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002e4a:	e0cd      	b.n	8002fe8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80c0 	beq.w	8002fe2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002e62:	4a68      	ldr	r2, [pc, #416]	; (8003004 <HAL_GPIO_DeInit+0x1c8>)
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	3302      	adds	r3, #2
 8002e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	220f      	movs	r2, #15
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4013      	ands	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e8a:	d025      	beq.n	8002ed8 <HAL_GPIO_DeInit+0x9c>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a5e      	ldr	r2, [pc, #376]	; (8003008 <HAL_GPIO_DeInit+0x1cc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d01f      	beq.n	8002ed4 <HAL_GPIO_DeInit+0x98>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a5d      	ldr	r2, [pc, #372]	; (800300c <HAL_GPIO_DeInit+0x1d0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d019      	beq.n	8002ed0 <HAL_GPIO_DeInit+0x94>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a5c      	ldr	r2, [pc, #368]	; (8003010 <HAL_GPIO_DeInit+0x1d4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_GPIO_DeInit+0x90>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a5b      	ldr	r2, [pc, #364]	; (8003014 <HAL_GPIO_DeInit+0x1d8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00d      	beq.n	8002ec8 <HAL_GPIO_DeInit+0x8c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a5a      	ldr	r2, [pc, #360]	; (8003018 <HAL_GPIO_DeInit+0x1dc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <HAL_GPIO_DeInit+0x88>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a59      	ldr	r2, [pc, #356]	; (800301c <HAL_GPIO_DeInit+0x1e0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d101      	bne.n	8002ec0 <HAL_GPIO_DeInit+0x84>
 8002ebc:	2306      	movs	r3, #6
 8002ebe:	e00c      	b.n	8002eda <HAL_GPIO_DeInit+0x9e>
 8002ec0:	2307      	movs	r3, #7
 8002ec2:	e00a      	b.n	8002eda <HAL_GPIO_DeInit+0x9e>
 8002ec4:	2305      	movs	r3, #5
 8002ec6:	e008      	b.n	8002eda <HAL_GPIO_DeInit+0x9e>
 8002ec8:	2304      	movs	r3, #4
 8002eca:	e006      	b.n	8002eda <HAL_GPIO_DeInit+0x9e>
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e004      	b.n	8002eda <HAL_GPIO_DeInit+0x9e>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e002      	b.n	8002eda <HAL_GPIO_DeInit+0x9e>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_GPIO_DeInit+0x9e>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	f002 0203 	and.w	r2, r2, #3
 8002ee0:	0092      	lsls	r2, r2, #2
 8002ee2:	4093      	lsls	r3, r2
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d132      	bne.n	8002f50 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002eea:	4b4d      	ldr	r3, [pc, #308]	; (8003020 <HAL_GPIO_DeInit+0x1e4>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	494b      	ldr	r1, [pc, #300]	; (8003020 <HAL_GPIO_DeInit+0x1e4>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002ef8:	4b49      	ldr	r3, [pc, #292]	; (8003020 <HAL_GPIO_DeInit+0x1e4>)
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	4947      	ldr	r1, [pc, #284]	; (8003020 <HAL_GPIO_DeInit+0x1e4>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002f06:	4b46      	ldr	r3, [pc, #280]	; (8003020 <HAL_GPIO_DeInit+0x1e4>)
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	4944      	ldr	r1, [pc, #272]	; (8003020 <HAL_GPIO_DeInit+0x1e4>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002f14:	4b42      	ldr	r3, [pc, #264]	; (8003020 <HAL_GPIO_DeInit+0x1e4>)
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	4940      	ldr	r1, [pc, #256]	; (8003020 <HAL_GPIO_DeInit+0x1e4>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	220f      	movs	r2, #15
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002f32:	4a34      	ldr	r2, [pc, #208]	; (8003004 <HAL_GPIO_DeInit+0x1c8>)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	089b      	lsrs	r3, r3, #2
 8002f38:	3302      	adds	r3, #2
 8002f3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	43da      	mvns	r2, r3
 8002f42:	4830      	ldr	r0, [pc, #192]	; (8003004 <HAL_GPIO_DeInit+0x1c8>)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	400a      	ands	r2, r1
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2103      	movs	r1, #3
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	08da      	lsrs	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3208      	adds	r2, #8
 8002f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	220f      	movs	r2, #15
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	08d2      	lsrs	r2, r2, #3
 8002f84:	4019      	ands	r1, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3208      	adds	r2, #8
 8002f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	2103      	movs	r1, #3
 8002f98:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	2103      	movs	r1, #3
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	401a      	ands	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	401a      	ands	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f47f af2b 	bne.w	8002e4c <HAL_GPIO_DeInit+0x10>
  }
}
 8002ff6:	bf00      	nop
 8002ff8:	bf00      	nop
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	40010000 	.word	0x40010000
 8003008:	48000400 	.word	0x48000400
 800300c:	48000800 	.word	0x48000800
 8003010:	48000c00 	.word	0x48000c00
 8003014:	48001000 	.word	0x48001000
 8003018:	48001400 	.word	0x48001400
 800301c:	48001800 	.word	0x48001800
 8003020:	40010400 	.word	0x40010400

08003024 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d006      	beq.n	8003048 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800303a:	4a05      	ldr	r2, [pc, #20]	; (8003050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd feb6 	bl	8000db4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40010400 	.word	0x40010400

08003054 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e081      	b.n	800316a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe fe3e 	bl	8001cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2224      	movs	r2, #36	; 0x24
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d107      	bne.n	80030ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	e006      	b.n	80030dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d104      	bne.n	80030ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003100:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003110:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69d9      	ldr	r1, [r3, #28]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1a      	ldr	r2, [r3, #32]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e021      	b.n	80031c8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2224      	movs	r2, #36	; 0x24
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7fe fe0b 	bl	8001db8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	4608      	mov	r0, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	461a      	mov	r2, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	817b      	strh	r3, [r7, #10]
 80031e2:	460b      	mov	r3, r1
 80031e4:	813b      	strh	r3, [r7, #8]
 80031e6:	4613      	mov	r3, r2
 80031e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	f040 80f9 	bne.w	80033ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_I2C_Mem_Write+0x34>
 80031fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800320a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0ed      	b.n	80033ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_I2C_Mem_Write+0x4e>
 800321a:	2302      	movs	r3, #2
 800321c:	e0e6      	b.n	80033ec <HAL_I2C_Mem_Write+0x21c>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003226:	f7ff f94f 	bl	80024c8 <HAL_GetTick>
 800322a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2319      	movs	r3, #25
 8003232:	2201      	movs	r2, #1
 8003234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fac3 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0d1      	b.n	80033ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2221      	movs	r2, #33	; 0x21
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2240      	movs	r2, #64	; 0x40
 8003254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a3a      	ldr	r2, [r7, #32]
 8003262:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003268:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003270:	88f8      	ldrh	r0, [r7, #6]
 8003272:	893a      	ldrh	r2, [r7, #8]
 8003274:	8979      	ldrh	r1, [r7, #10]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	9301      	str	r3, [sp, #4]
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	4603      	mov	r3, r0
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f9d3 	bl	800362c <I2C_RequestMemoryWrite>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0a9      	b.n	80033ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2bff      	cmp	r3, #255	; 0xff
 80032a0:	d90e      	bls.n	80032c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	22ff      	movs	r2, #255	; 0xff
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	8979      	ldrh	r1, [r7, #10]
 80032b0:	2300      	movs	r3, #0
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fc2b 	bl	8003b14 <I2C_TransferConfig>
 80032be:	e00f      	b.n	80032e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	8979      	ldrh	r1, [r7, #10]
 80032d2:	2300      	movs	r3, #0
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fc1a 	bl	8003b14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 faad 	bl	8003844 <I2C_WaitOnTXISFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e07b      	b.n	80033ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	781a      	ldrb	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d034      	beq.n	8003398 <HAL_I2C_Mem_Write+0x1c8>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003332:	2b00      	cmp	r3, #0
 8003334:	d130      	bne.n	8003398 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	2200      	movs	r2, #0
 800333e:	2180      	movs	r1, #128	; 0x80
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fa3f 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e04d      	b.n	80033ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	2bff      	cmp	r3, #255	; 0xff
 8003358:	d90e      	bls.n	8003378 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	22ff      	movs	r2, #255	; 0xff
 800335e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	b2da      	uxtb	r2, r3
 8003366:	8979      	ldrh	r1, [r7, #10]
 8003368:	2300      	movs	r3, #0
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 fbcf 	bl	8003b14 <I2C_TransferConfig>
 8003376:	e00f      	b.n	8003398 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	b2da      	uxtb	r2, r3
 8003388:	8979      	ldrh	r1, [r7, #10]
 800338a:	2300      	movs	r3, #0
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fbbe 	bl	8003b14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d19e      	bne.n	80032e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fa8c 	bl	80038c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e01a      	b.n	80033ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2220      	movs	r2, #32
 80033bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_I2C_Mem_Write+0x224>)
 80033ca:	400b      	ands	r3, r1
 80033cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
  }
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	fe00e800 	.word	0xfe00e800

080033f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	4608      	mov	r0, r1
 8003402:	4611      	mov	r1, r2
 8003404:	461a      	mov	r2, r3
 8003406:	4603      	mov	r3, r0
 8003408:	817b      	strh	r3, [r7, #10]
 800340a:	460b      	mov	r3, r1
 800340c:	813b      	strh	r3, [r7, #8]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b20      	cmp	r3, #32
 800341c:	f040 80fd 	bne.w	800361a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_I2C_Mem_Read+0x34>
 8003426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003432:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0f1      	b.n	800361c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_I2C_Mem_Read+0x4e>
 8003442:	2302      	movs	r3, #2
 8003444:	e0ea      	b.n	800361c <HAL_I2C_Mem_Read+0x224>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800344e:	f7ff f83b 	bl	80024c8 <HAL_GetTick>
 8003452:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2319      	movs	r3, #25
 800345a:	2201      	movs	r2, #1
 800345c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f9af 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0d5      	b.n	800361c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2222      	movs	r2, #34	; 0x22
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2240      	movs	r2, #64	; 0x40
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a3a      	ldr	r2, [r7, #32]
 800348a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003498:	88f8      	ldrh	r0, [r7, #6]
 800349a:	893a      	ldrh	r2, [r7, #8]
 800349c:	8979      	ldrh	r1, [r7, #10]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	4603      	mov	r3, r0
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f913 	bl	80036d4 <I2C_RequestMemoryRead>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0ad      	b.n	800361c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2bff      	cmp	r3, #255	; 0xff
 80034c8:	d90e      	bls.n	80034e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	22ff      	movs	r2, #255	; 0xff
 80034ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	8979      	ldrh	r1, [r7, #10]
 80034d8:	4b52      	ldr	r3, [pc, #328]	; (8003624 <HAL_I2C_Mem_Read+0x22c>)
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fb17 	bl	8003b14 <I2C_TransferConfig>
 80034e6:	e00f      	b.n	8003508 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	8979      	ldrh	r1, [r7, #10]
 80034fa:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <HAL_I2C_Mem_Read+0x22c>)
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fb06 	bl	8003b14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	2200      	movs	r2, #0
 8003510:	2104      	movs	r1, #4
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f956 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07c      	b.n	800361c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d034      	beq.n	80035c8 <HAL_I2C_Mem_Read+0x1d0>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003562:	2b00      	cmp	r3, #0
 8003564:	d130      	bne.n	80035c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	2200      	movs	r2, #0
 800356e:	2180      	movs	r1, #128	; 0x80
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f927 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e04d      	b.n	800361c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003584:	b29b      	uxth	r3, r3
 8003586:	2bff      	cmp	r3, #255	; 0xff
 8003588:	d90e      	bls.n	80035a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	22ff      	movs	r2, #255	; 0xff
 800358e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	b2da      	uxtb	r2, r3
 8003596:	8979      	ldrh	r1, [r7, #10]
 8003598:	2300      	movs	r3, #0
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fab7 	bl	8003b14 <I2C_TransferConfig>
 80035a6:	e00f      	b.n	80035c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	8979      	ldrh	r1, [r7, #10]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 faa6 	bl	8003b14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d19a      	bne.n	8003508 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f974 	bl	80038c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e01a      	b.n	800361c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2220      	movs	r2, #32
 80035ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_I2C_Mem_Read+0x230>)
 80035fa:	400b      	ands	r3, r1
 80035fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	e000      	b.n	800361c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
  }
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	80002400 	.word	0x80002400
 8003628:	fe00e800 	.word	0xfe00e800

0800362c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	461a      	mov	r2, r3
 800363a:	4603      	mov	r3, r0
 800363c:	817b      	strh	r3, [r7, #10]
 800363e:	460b      	mov	r3, r1
 8003640:	813b      	strh	r3, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	8979      	ldrh	r1, [r7, #10]
 800364c:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <I2C_RequestMemoryWrite+0xa4>)
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 fa5d 	bl	8003b14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	69b9      	ldr	r1, [r7, #24]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f8f0 	bl	8003844 <I2C_WaitOnTXISFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e02c      	b.n	80036c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d105      	bne.n	8003680 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003674:	893b      	ldrh	r3, [r7, #8]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	629a      	str	r2, [r3, #40]	; 0x28
 800367e:	e015      	b.n	80036ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003680:	893b      	ldrh	r3, [r7, #8]
 8003682:	0a1b      	lsrs	r3, r3, #8
 8003684:	b29b      	uxth	r3, r3
 8003686:	b2da      	uxtb	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	69b9      	ldr	r1, [r7, #24]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f8d6 	bl	8003844 <I2C_WaitOnTXISFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e012      	b.n	80036c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036a2:	893b      	ldrh	r3, [r7, #8]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2200      	movs	r2, #0
 80036b4:	2180      	movs	r1, #128	; 0x80
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f884 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	80002000 	.word	0x80002000

080036d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	4608      	mov	r0, r1
 80036de:	4611      	mov	r1, r2
 80036e0:	461a      	mov	r2, r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	817b      	strh	r3, [r7, #10]
 80036e6:	460b      	mov	r3, r1
 80036e8:	813b      	strh	r3, [r7, #8]
 80036ea:	4613      	mov	r3, r2
 80036ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	8979      	ldrh	r1, [r7, #10]
 80036f4:	4b20      	ldr	r3, [pc, #128]	; (8003778 <I2C_RequestMemoryRead+0xa4>)
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2300      	movs	r3, #0
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 fa0a 	bl	8003b14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	69b9      	ldr	r1, [r7, #24]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f89d 	bl	8003844 <I2C_WaitOnTXISFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e02c      	b.n	800376e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d105      	bne.n	8003726 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800371a:	893b      	ldrh	r3, [r7, #8]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	629a      	str	r2, [r3, #40]	; 0x28
 8003724:	e015      	b.n	8003752 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003726:	893b      	ldrh	r3, [r7, #8]
 8003728:	0a1b      	lsrs	r3, r3, #8
 800372a:	b29b      	uxth	r3, r3
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	69b9      	ldr	r1, [r7, #24]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f883 	bl	8003844 <I2C_WaitOnTXISFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e012      	b.n	800376e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003748:	893b      	ldrh	r3, [r7, #8]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2200      	movs	r2, #0
 800375a:	2140      	movs	r1, #64	; 0x40
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f831 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	80002000 	.word	0x80002000

0800377c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b02      	cmp	r3, #2
 8003790:	d103      	bne.n	800379a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d007      	beq.n	80037b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	619a      	str	r2, [r3, #24]
  }
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d4:	e022      	b.n	800381c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037dc:	d01e      	beq.n	800381c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037de:	f7fe fe73 	bl	80024c8 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d302      	bcc.n	80037f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d113      	bne.n	800381c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	f043 0220 	orr.w	r2, r3, #32
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e00f      	b.n	800383c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	4013      	ands	r3, r2
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	429a      	cmp	r2, r3
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	461a      	mov	r2, r3
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	429a      	cmp	r2, r3
 8003838:	d0cd      	beq.n	80037d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003850:	e02c      	b.n	80038ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f870 	bl	800393c <I2C_IsErrorOccurred>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e02a      	b.n	80038bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800386c:	d01e      	beq.n	80038ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386e:	f7fe fe2b 	bl	80024c8 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	429a      	cmp	r2, r3
 800387c:	d302      	bcc.n	8003884 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d113      	bne.n	80038ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e007      	b.n	80038bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d1cb      	bne.n	8003852 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038d0:	e028      	b.n	8003924 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f830 	bl	800393c <I2C_IsErrorOccurred>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e026      	b.n	8003934 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e6:	f7fe fdef 	bl	80024c8 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d302      	bcc.n	80038fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d113      	bne.n	8003924 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003900:	f043 0220 	orr.w	r2, r3, #32
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e007      	b.n	8003934 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b20      	cmp	r3, #32
 8003930:	d1cf      	bne.n	80038d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003956:	2300      	movs	r3, #0
 8003958:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b00      	cmp	r3, #0
 8003966:	d075      	beq.n	8003a54 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2210      	movs	r2, #16
 800396e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003970:	e056      	b.n	8003a20 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003978:	d052      	beq.n	8003a20 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800397a:	f7fe fda5 	bl	80024c8 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	429a      	cmp	r2, r3
 8003988:	d302      	bcc.n	8003990 <I2C_IsErrorOccurred+0x54>
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d147      	bne.n	8003a20 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b2:	d12e      	bne.n	8003a12 <I2C_IsErrorOccurred+0xd6>
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ba:	d02a      	beq.n	8003a12 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d027      	beq.n	8003a12 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039d0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039d2:	f7fe fd79 	bl	80024c8 <HAL_GetTick>
 80039d6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039d8:	e01b      	b.n	8003a12 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039da:	f7fe fd75 	bl	80024c8 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b19      	cmp	r3, #25
 80039e6:	d914      	bls.n	8003a12 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	f043 0220 	orr.w	r2, r3, #32
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d1dc      	bne.n	80039da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d003      	beq.n	8003a36 <I2C_IsErrorOccurred+0xfa>
 8003a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d09d      	beq.n	8003972 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2220      	movs	r2, #32
 8003a44:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f043 0304 	orr.w	r3, r3, #4
 8003a4c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00b      	beq.n	8003aa0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f043 0308 	orr.w	r3, r3, #8
 8003a8e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	f043 0302 	orr.w	r3, r3, #2
 8003ab0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01c      	beq.n	8003b04 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f7ff fe56 	bl	800377c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <I2C_IsErrorOccurred+0x1d4>)
 8003adc:	400b      	ands	r3, r1
 8003ade:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3728      	adds	r7, #40	; 0x28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	fe00e800 	.word	0xfe00e800

08003b14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	817b      	strh	r3, [r7, #10]
 8003b22:	4613      	mov	r3, r2
 8003b24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b26:	897b      	ldrh	r3, [r7, #10]
 8003b28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b2c:	7a7b      	ldrb	r3, [r7, #9]
 8003b2e:	041b      	lsls	r3, r3, #16
 8003b30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b34:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b42:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	0d5b      	lsrs	r3, r3, #21
 8003b4e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b52:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <I2C_TransferConfig+0x60>)
 8003b54:	430b      	orrs	r3, r1
 8003b56:	43db      	mvns	r3, r3
 8003b58:	ea02 0103 	and.w	r1, r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	03ff63ff 	.word	0x03ff63ff

08003b78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d138      	bne.n	8003c00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e032      	b.n	8003c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2224      	movs	r2, #36	; 0x24
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6819      	ldr	r1, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e000      	b.n	8003c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
  }
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b085      	sub	sp, #20
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d139      	bne.n	8003c98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e033      	b.n	8003c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2224      	movs	r2, #36	; 0x24
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0201 	bic.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e000      	b.n	8003c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
  }
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10c      	bne.n	8003cd4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003cba:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc6:	d10e      	bne.n	8003ce6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003cc8:	f000 f852 	bl	8003d70 <HAL_PWREx_DisableLowPowerRunMode>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8003cd2:	e016      	b.n	8003d02 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce0:	d001      	beq.n	8003ce6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8003ce2:	f000 f835 	bl	8003d50 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_PWR_EnterSLEEPMode+0x64>)
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <HAL_PWR_EnterSLEEPMode+0x64>)
 8003cec:	f023 0304 	bic.w	r3, r3, #4
 8003cf0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003cf8:	bf30      	wfi
 8003cfa:	e002      	b.n	8003d02 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003cfc:	bf40      	sev
    __WFE();
 8003cfe:	bf20      	wfe
    __WFE();
 8003d00:	bf20      	wfe
  }

}
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_PWR_EnableSleepOnExit+0x1c>)
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <HAL_PWR_EnableSleepOnExit+0x1c>)
 8003d1a:	f043 0302 	orr.w	r3, r3, #2
 8003d1e:	6113      	str	r3, [r2, #16]
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_PWR_DisableSleepOnExit+0x1c>)
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <HAL_PWR_DisableSleepOnExit+0x1c>)
 8003d3a:	f023 0302 	bic.w	r3, r3, #2
 8003d3e:	6113      	str	r3, [r2, #16]
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d5e:	6013      	str	r3, [r2, #0]
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40007000 	.word	0x40007000

08003d70 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003d76:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a16      	ldr	r2, [pc, #88]	; (8003dd4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d80:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2232      	movs	r2, #50	; 0x32
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
 8003d8c:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0c9b      	lsrs	r3, r3, #18
 8003d94:	3301      	adds	r3, #1
 8003d96:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003d98:	e002      	b.n	8003da0 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003da0:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dac:	d102      	bne.n	8003db4 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f2      	bne.n	8003d9a <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003db4:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc0:	d101      	bne.n	8003dc6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e000      	b.n	8003dc8 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	20000008 	.word	0x20000008
 8003ddc:	431bde83 	.word	0x431bde83

08003de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b089      	sub	sp, #36	; 0x24
 8003de4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	2300      	movs	r3, #0
 8003dec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dee:	4b3e      	ldr	r3, [pc, #248]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df8:	4b3b      	ldr	r3, [pc, #236]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x34>
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b0c      	cmp	r3, #12
 8003e0c:	d121      	bne.n	8003e52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d11e      	bne.n	8003e52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e14:	4b34      	ldr	r3, [pc, #208]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d107      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e20:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e005      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e30:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e3c:	4a2b      	ldr	r2, [pc, #172]	; (8003eec <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d102      	bne.n	8003e5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	e004      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e64:	4b23      	ldr	r3, [pc, #140]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b0c      	cmp	r3, #12
 8003e6c:	d134      	bne.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d003      	beq.n	8003e86 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d003      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0xac>
 8003e84:	e005      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e86:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e88:	617b      	str	r3, [r7, #20]
      break;
 8003e8a:	e005      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e8c:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e8e:	617b      	str	r3, [r7, #20]
      break;
 8003e90:	e002      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	617b      	str	r3, [r7, #20]
      break;
 8003e96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e98:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	0a1b      	lsrs	r3, r3, #8
 8003eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	fb02 f203 	mul.w	r2, r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	0e5b      	lsrs	r3, r3, #25
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	3301      	adds	r3, #1
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3724      	adds	r7, #36	; 0x24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	08006320 	.word	0x08006320
 8003ef0:	00f42400 	.word	0x00f42400
 8003ef4:	007a1200 	.word	0x007a1200

08003ef8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000008 	.word	0x20000008

08003f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f14:	f7ff fff0 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4904      	ldr	r1, [pc, #16]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40021000 	.word	0x40021000
 8003f38:	08006318 	.word	0x08006318

08003f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f40:	f7ff ffda 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f44:	4602      	mov	r2, r0
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	0adb      	lsrs	r3, r3, #11
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	4904      	ldr	r1, [pc, #16]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f52:	5ccb      	ldrb	r3, [r1, r3]
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40021000 	.word	0x40021000
 8003f64:	08006318 	.word	0x08006318

08003f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f70:	2300      	movs	r3, #0
 8003f72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f74:	2300      	movs	r3, #0
 8003f76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d041      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f8c:	d02a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f92:	d824      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f98:	d008      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f9e:	d81e      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003fa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa8:	d010      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003faa:	e018      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fac:	4b86      	ldr	r3, [pc, #536]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4a85      	ldr	r2, [pc, #532]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fb8:	e015      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fabb 	bl	800453c <RCCEx_PLLSAI1_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fca:	e00c      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3320      	adds	r3, #32
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fba6 	bl	8004724 <RCCEx_PLLSAI2_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fdc:	e003      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	74fb      	strb	r3, [r7, #19]
      break;
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe6:	7cfb      	ldrb	r3, [r7, #19]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10b      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fec:	4b76      	ldr	r3, [pc, #472]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ffa:	4973      	ldr	r1, [pc, #460]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004002:	e001      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004004:	7cfb      	ldrb	r3, [r7, #19]
 8004006:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d041      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004018:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800401c:	d02a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800401e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004022:	d824      	bhi.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004024:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004028:	d008      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800402a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800402e:	d81e      	bhi.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004038:	d010      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800403a:	e018      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800403c:	4b62      	ldr	r3, [pc, #392]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4a61      	ldr	r2, [pc, #388]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004046:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004048:	e015      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	2100      	movs	r1, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fa73 	bl	800453c <RCCEx_PLLSAI1_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800405a:	e00c      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3320      	adds	r3, #32
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fb5e 	bl	8004724 <RCCEx_PLLSAI2_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800406c:	e003      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	74fb      	strb	r3, [r7, #19]
      break;
 8004072:	e000      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004076:	7cfb      	ldrb	r3, [r7, #19]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10b      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800407c:	4b52      	ldr	r3, [pc, #328]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800408a:	494f      	ldr	r1, [pc, #316]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004092:	e001      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 80a0 	beq.w	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a6:	2300      	movs	r3, #0
 80040a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040aa:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80040ba:	2300      	movs	r3, #0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00d      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c0:	4b41      	ldr	r3, [pc, #260]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c4:	4a40      	ldr	r2, [pc, #256]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ca:	6593      	str	r3, [r2, #88]	; 0x58
 80040cc:	4b3e      	ldr	r3, [pc, #248]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d8:	2301      	movs	r3, #1
 80040da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040dc:	4b3b      	ldr	r3, [pc, #236]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a3a      	ldr	r2, [pc, #232]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040e8:	f7fe f9ee 	bl	80024c8 <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040ee:	e009      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f0:	f7fe f9ea 	bl	80024c8 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d902      	bls.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	74fb      	strb	r3, [r7, #19]
        break;
 8004102:	e005      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004104:	4b31      	ldr	r3, [pc, #196]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0ef      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d15c      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004116:	4b2c      	ldr	r3, [pc, #176]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004120:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01f      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	429a      	cmp	r2, r3
 8004132:	d019      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004134:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800413e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004140:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004146:	4a20      	ldr	r2, [pc, #128]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004150:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004156:	4a1c      	ldr	r2, [pc, #112]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800415c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004160:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004172:	f7fe f9a9 	bl	80024c8 <HAL_GetTick>
 8004176:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004178:	e00b      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417a:	f7fe f9a5 	bl	80024c8 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	f241 3288 	movw	r2, #5000	; 0x1388
 8004188:	4293      	cmp	r3, r2
 800418a:	d902      	bls.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	74fb      	strb	r3, [r7, #19]
            break;
 8004190:	e006      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004192:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ec      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041a6:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b6:	4904      	ldr	r1, [pc, #16]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041be:	e009      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041c0:	7cfb      	ldrb	r3, [r7, #19]
 80041c2:	74bb      	strb	r3, [r7, #18]
 80041c4:	e006      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80041c6:	bf00      	nop
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041d4:	7c7b      	ldrb	r3, [r7, #17]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041da:	4b9e      	ldr	r3, [pc, #632]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041de:	4a9d      	ldr	r2, [pc, #628]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041f2:	4b98      	ldr	r3, [pc, #608]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	f023 0203 	bic.w	r2, r3, #3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	4994      	ldr	r1, [pc, #592]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004214:	4b8f      	ldr	r3, [pc, #572]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	f023 020c 	bic.w	r2, r3, #12
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004222:	498c      	ldr	r1, [pc, #560]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004236:	4b87      	ldr	r3, [pc, #540]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	4983      	ldr	r1, [pc, #524]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004258:	4b7e      	ldr	r3, [pc, #504]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	497b      	ldr	r1, [pc, #492]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800427a:	4b76      	ldr	r3, [pc, #472]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004288:	4972      	ldr	r1, [pc, #456]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800429c:	4b6d      	ldr	r3, [pc, #436]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042aa:	496a      	ldr	r1, [pc, #424]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042be:	4b65      	ldr	r3, [pc, #404]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042cc:	4961      	ldr	r1, [pc, #388]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042e0:	4b5c      	ldr	r3, [pc, #368]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ee:	4959      	ldr	r1, [pc, #356]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004302:	4b54      	ldr	r3, [pc, #336]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004310:	4950      	ldr	r1, [pc, #320]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004324:	4b4b      	ldr	r3, [pc, #300]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004332:	4948      	ldr	r1, [pc, #288]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004346:	4b43      	ldr	r3, [pc, #268]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004354:	493f      	ldr	r1, [pc, #252]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d028      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004368:	4b3a      	ldr	r3, [pc, #232]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004376:	4937      	ldr	r1, [pc, #220]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004386:	d106      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004388:	4b32      	ldr	r3, [pc, #200]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4a31      	ldr	r2, [pc, #196]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004392:	60d3      	str	r3, [r2, #12]
 8004394:	e011      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800439e:	d10c      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	2101      	movs	r1, #1
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f8c8 	bl	800453c <RCCEx_PLLSAI1_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80043b6:	7cfb      	ldrb	r3, [r7, #19]
 80043b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d028      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043c6:	4b23      	ldr	r3, [pc, #140]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	491f      	ldr	r1, [pc, #124]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043e4:	d106      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043e6:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	4a1a      	ldr	r2, [pc, #104]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043f0:	60d3      	str	r3, [r2, #12]
 80043f2:	e011      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043fc:	d10c      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3304      	adds	r3, #4
 8004402:	2101      	movs	r1, #1
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f899 	bl	800453c <RCCEx_PLLSAI1_Config>
 800440a:	4603      	mov	r3, r0
 800440c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800440e:	7cfb      	ldrb	r3, [r7, #19]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d02b      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004432:	4908      	ldr	r1, [pc, #32]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004442:	d109      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004444:	4b03      	ldr	r3, [pc, #12]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4a02      	ldr	r2, [pc, #8]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800444e:	60d3      	str	r3, [r2, #12]
 8004450:	e014      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004460:	d10c      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	2101      	movs	r1, #1
 8004468:	4618      	mov	r0, r3
 800446a:	f000 f867 	bl	800453c <RCCEx_PLLSAI1_Config>
 800446e:	4603      	mov	r3, r0
 8004470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004472:	7cfb      	ldrb	r3, [r7, #19]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d02f      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004488:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004496:	4928      	ldr	r1, [pc, #160]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044a6:	d10d      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	2102      	movs	r1, #2
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f844 	bl	800453c <RCCEx_PLLSAI1_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d014      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	74bb      	strb	r3, [r7, #18]
 80044c2:	e011      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044cc:	d10c      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3320      	adds	r3, #32
 80044d2:	2102      	movs	r1, #2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 f925 	bl	8004724 <RCCEx_PLLSAI2_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044de:	7cfb      	ldrb	r3, [r7, #19]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044e4:	7cfb      	ldrb	r3, [r7, #19]
 80044e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044f4:	4b10      	ldr	r3, [pc, #64]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004502:	490d      	ldr	r1, [pc, #52]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00b      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004526:	4904      	ldr	r1, [pc, #16]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800452e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40021000 	.word	0x40021000

0800453c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800454a:	4b75      	ldr	r3, [pc, #468]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d018      	beq.n	8004588 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004556:	4b72      	ldr	r3, [pc, #456]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f003 0203 	and.w	r2, r3, #3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d10d      	bne.n	8004582 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
       ||
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800456e:	4b6c      	ldr	r3, [pc, #432]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
       ||
 800457e:	429a      	cmp	r2, r3
 8004580:	d047      	beq.n	8004612 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
 8004586:	e044      	b.n	8004612 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b03      	cmp	r3, #3
 800458e:	d018      	beq.n	80045c2 <RCCEx_PLLSAI1_Config+0x86>
 8004590:	2b03      	cmp	r3, #3
 8004592:	d825      	bhi.n	80045e0 <RCCEx_PLLSAI1_Config+0xa4>
 8004594:	2b01      	cmp	r3, #1
 8004596:	d002      	beq.n	800459e <RCCEx_PLLSAI1_Config+0x62>
 8004598:	2b02      	cmp	r3, #2
 800459a:	d009      	beq.n	80045b0 <RCCEx_PLLSAI1_Config+0x74>
 800459c:	e020      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800459e:	4b60      	ldr	r3, [pc, #384]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11d      	bne.n	80045e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ae:	e01a      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045b0:	4b5b      	ldr	r3, [pc, #364]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d116      	bne.n	80045ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c0:	e013      	b.n	80045ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045c2:	4b57      	ldr	r3, [pc, #348]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10f      	bne.n	80045ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045ce:	4b54      	ldr	r3, [pc, #336]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045de:	e006      	b.n	80045ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]
      break;
 80045e4:	e004      	b.n	80045f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045e6:	bf00      	nop
 80045e8:	e002      	b.n	80045f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045ea:	bf00      	nop
 80045ec:	e000      	b.n	80045f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10d      	bne.n	8004612 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045f6:	4b4a      	ldr	r3, [pc, #296]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6819      	ldr	r1, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	3b01      	subs	r3, #1
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	430b      	orrs	r3, r1
 800460c:	4944      	ldr	r1, [pc, #272]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d17d      	bne.n	8004714 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004618:	4b41      	ldr	r3, [pc, #260]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a40      	ldr	r2, [pc, #256]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004624:	f7fd ff50 	bl	80024c8 <HAL_GetTick>
 8004628:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800462a:	e009      	b.n	8004640 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800462c:	f7fd ff4c 	bl	80024c8 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d902      	bls.n	8004640 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	73fb      	strb	r3, [r7, #15]
        break;
 800463e:	e005      	b.n	800464c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004640:	4b37      	ldr	r3, [pc, #220]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1ef      	bne.n	800462c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d160      	bne.n	8004714 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d111      	bne.n	800467c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004658:	4b31      	ldr	r3, [pc, #196]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6892      	ldr	r2, [r2, #8]
 8004668:	0211      	lsls	r1, r2, #8
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68d2      	ldr	r2, [r2, #12]
 800466e:	0912      	lsrs	r2, r2, #4
 8004670:	0452      	lsls	r2, r2, #17
 8004672:	430a      	orrs	r2, r1
 8004674:	492a      	ldr	r1, [pc, #168]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004676:	4313      	orrs	r3, r2
 8004678:	610b      	str	r3, [r1, #16]
 800467a:	e027      	b.n	80046cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d112      	bne.n	80046a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004682:	4b27      	ldr	r3, [pc, #156]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800468a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6892      	ldr	r2, [r2, #8]
 8004692:	0211      	lsls	r1, r2, #8
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6912      	ldr	r2, [r2, #16]
 8004698:	0852      	lsrs	r2, r2, #1
 800469a:	3a01      	subs	r2, #1
 800469c:	0552      	lsls	r2, r2, #21
 800469e:	430a      	orrs	r2, r1
 80046a0:	491f      	ldr	r1, [pc, #124]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	610b      	str	r3, [r1, #16]
 80046a6:	e011      	b.n	80046cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046a8:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6892      	ldr	r2, [r2, #8]
 80046b8:	0211      	lsls	r1, r2, #8
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6952      	ldr	r2, [r2, #20]
 80046be:	0852      	lsrs	r2, r2, #1
 80046c0:	3a01      	subs	r2, #1
 80046c2:	0652      	lsls	r2, r2, #25
 80046c4:	430a      	orrs	r2, r1
 80046c6:	4916      	ldr	r1, [pc, #88]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046cc:	4b14      	ldr	r3, [pc, #80]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a13      	ldr	r2, [pc, #76]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d8:	f7fd fef6 	bl	80024c8 <HAL_GetTick>
 80046dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046de:	e009      	b.n	80046f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046e0:	f7fd fef2 	bl	80024c8 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d902      	bls.n	80046f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	73fb      	strb	r3, [r7, #15]
          break;
 80046f2:	e005      	b.n	8004700 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046f4:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0ef      	beq.n	80046e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004706:	4b06      	ldr	r3, [pc, #24]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	4904      	ldr	r1, [pc, #16]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004710:	4313      	orrs	r3, r2
 8004712:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004714:	7bfb      	ldrb	r3, [r7, #15]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000

08004724 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004732:	4b6a      	ldr	r3, [pc, #424]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d018      	beq.n	8004770 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800473e:	4b67      	ldr	r3, [pc, #412]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0203 	and.w	r2, r3, #3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d10d      	bne.n	800476a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
       ||
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004756:	4b61      	ldr	r3, [pc, #388]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
       ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d047      	beq.n	80047fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
 800476e:	e044      	b.n	80047fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b03      	cmp	r3, #3
 8004776:	d018      	beq.n	80047aa <RCCEx_PLLSAI2_Config+0x86>
 8004778:	2b03      	cmp	r3, #3
 800477a:	d825      	bhi.n	80047c8 <RCCEx_PLLSAI2_Config+0xa4>
 800477c:	2b01      	cmp	r3, #1
 800477e:	d002      	beq.n	8004786 <RCCEx_PLLSAI2_Config+0x62>
 8004780:	2b02      	cmp	r3, #2
 8004782:	d009      	beq.n	8004798 <RCCEx_PLLSAI2_Config+0x74>
 8004784:	e020      	b.n	80047c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004786:	4b55      	ldr	r3, [pc, #340]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d11d      	bne.n	80047ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004796:	e01a      	b.n	80047ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004798:	4b50      	ldr	r3, [pc, #320]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d116      	bne.n	80047d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a8:	e013      	b.n	80047d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047aa:	4b4c      	ldr	r3, [pc, #304]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10f      	bne.n	80047d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047b6:	4b49      	ldr	r3, [pc, #292]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047c6:	e006      	b.n	80047d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	73fb      	strb	r3, [r7, #15]
      break;
 80047cc:	e004      	b.n	80047d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047ce:	bf00      	nop
 80047d0:	e002      	b.n	80047d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047d2:	bf00      	nop
 80047d4:	e000      	b.n	80047d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10d      	bne.n	80047fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047de:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6819      	ldr	r1, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	430b      	orrs	r3, r1
 80047f4:	4939      	ldr	r1, [pc, #228]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d167      	bne.n	80048d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004800:	4b36      	ldr	r3, [pc, #216]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a35      	ldr	r2, [pc, #212]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800480a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800480c:	f7fd fe5c 	bl	80024c8 <HAL_GetTick>
 8004810:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004812:	e009      	b.n	8004828 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004814:	f7fd fe58 	bl	80024c8 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d902      	bls.n	8004828 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	73fb      	strb	r3, [r7, #15]
        break;
 8004826:	e005      	b.n	8004834 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004828:	4b2c      	ldr	r3, [pc, #176]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ef      	bne.n	8004814 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d14a      	bne.n	80048d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d111      	bne.n	8004864 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004840:	4b26      	ldr	r3, [pc, #152]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6892      	ldr	r2, [r2, #8]
 8004850:	0211      	lsls	r1, r2, #8
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68d2      	ldr	r2, [r2, #12]
 8004856:	0912      	lsrs	r2, r2, #4
 8004858:	0452      	lsls	r2, r2, #17
 800485a:	430a      	orrs	r2, r1
 800485c:	491f      	ldr	r1, [pc, #124]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800485e:	4313      	orrs	r3, r2
 8004860:	614b      	str	r3, [r1, #20]
 8004862:	e011      	b.n	8004888 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004864:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800486c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6892      	ldr	r2, [r2, #8]
 8004874:	0211      	lsls	r1, r2, #8
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6912      	ldr	r2, [r2, #16]
 800487a:	0852      	lsrs	r2, r2, #1
 800487c:	3a01      	subs	r2, #1
 800487e:	0652      	lsls	r2, r2, #25
 8004880:	430a      	orrs	r2, r1
 8004882:	4916      	ldr	r1, [pc, #88]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004884:	4313      	orrs	r3, r2
 8004886:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004888:	4b14      	ldr	r3, [pc, #80]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a13      	ldr	r2, [pc, #76]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800488e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004892:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fd fe18 	bl	80024c8 <HAL_GetTick>
 8004898:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800489a:	e009      	b.n	80048b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800489c:	f7fd fe14 	bl	80024c8 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d902      	bls.n	80048b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	73fb      	strb	r3, [r7, #15]
          break;
 80048ae:	e005      	b.n	80048bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048b0:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0ef      	beq.n	800489c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	4904      	ldr	r1, [pc, #16]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000

080048e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e040      	b.n	8004974 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fd fa7c 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2224      	movs	r2, #36	; 0x24
 800490c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0201 	bic.w	r2, r2, #1
 800491c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f92c 	bl	8004b7c <UART_SetConfig>
 8004924:	4603      	mov	r3, r0
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e022      	b.n	8004974 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fbaa 	bl	8005090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800494a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800495a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fc31 	bl	80051d4 <UART_CheckIdleState>
 8004972:	4603      	mov	r3, r0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	; 0x28
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	603b      	str	r3, [r7, #0]
 8004988:	4613      	mov	r3, r2
 800498a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004990:	2b20      	cmp	r3, #32
 8004992:	f040 8082 	bne.w	8004a9a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_UART_Transmit+0x26>
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e07a      	b.n	8004a9c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_UART_Transmit+0x38>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e073      	b.n	8004a9c <HAL_UART_Transmit+0x120>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2221      	movs	r2, #33	; 0x21
 80049c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ca:	f7fd fd7d 	bl	80024c8 <HAL_GetTick>
 80049ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	88fa      	ldrh	r2, [r7, #6]
 80049d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e8:	d108      	bne.n	80049fc <HAL_UART_Transmit+0x80>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d104      	bne.n	80049fc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e003      	b.n	8004a04 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004a0c:	e02d      	b.n	8004a6a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2200      	movs	r2, #0
 8004a16:	2180      	movs	r1, #128	; 0x80
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fc24 	bl	8005266 <UART_WaitOnFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e039      	b.n	8004a9c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10b      	bne.n	8004a46 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	881a      	ldrh	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a3a:	b292      	uxth	r2, r2
 8004a3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	3302      	adds	r3, #2
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	e008      	b.n	8004a58 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	781a      	ldrb	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	b292      	uxth	r2, r2
 8004a50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	3301      	adds	r3, #1
 8004a56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1cb      	bne.n	8004a0e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2140      	movs	r1, #64	; 0x40
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 fbf0 	bl	8005266 <UART_WaitOnFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e005      	b.n	8004a9c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e000      	b.n	8004a9c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
  }
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08a      	sub	sp, #40	; 0x28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d142      	bne.n	8004b40 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_UART_Receive_IT+0x22>
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e03b      	b.n	8004b42 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_UART_Receive_IT+0x34>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e034      	b.n	8004b42 <HAL_UART_Receive_IT+0x9e>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <HAL_UART_Receive_IT+0xa8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d01f      	beq.n	8004b30 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d018      	beq.n	8004b30 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	623b      	str	r3, [r7, #32]
 8004b1e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	69f9      	ldr	r1, [r7, #28]
 8004b22:	6a3a      	ldr	r2, [r7, #32]
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e6      	bne.n	8004afe <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	461a      	mov	r2, r3
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fc5a 	bl	80053f0 <UART_Start_Receive_IT>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	e000      	b.n	8004b42 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b40:	2302      	movs	r3, #2
  }
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3728      	adds	r7, #40	; 0x28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40008000 	.word	0x40008000

08004b50 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b7c:	b5b0      	push	{r4, r5, r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4bad      	ldr	r3, [pc, #692]	; (8004e5c <UART_SetConfig+0x2e0>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	69f9      	ldr	r1, [r7, #28]
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4aa2      	ldr	r2, [pc, #648]	; (8004e60 <UART_SetConfig+0x2e4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a99      	ldr	r2, [pc, #612]	; (8004e64 <UART_SetConfig+0x2e8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d121      	bne.n	8004c46 <UART_SetConfig+0xca>
 8004c02:	4b99      	ldr	r3, [pc, #612]	; (8004e68 <UART_SetConfig+0x2ec>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d817      	bhi.n	8004c40 <UART_SetConfig+0xc4>
 8004c10:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0x9c>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c29 	.word	0x08004c29
 8004c1c:	08004c35 	.word	0x08004c35
 8004c20:	08004c2f 	.word	0x08004c2f
 8004c24:	08004c3b 	.word	0x08004c3b
 8004c28:	2301      	movs	r3, #1
 8004c2a:	76fb      	strb	r3, [r7, #27]
 8004c2c:	e0e7      	b.n	8004dfe <UART_SetConfig+0x282>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	76fb      	strb	r3, [r7, #27]
 8004c32:	e0e4      	b.n	8004dfe <UART_SetConfig+0x282>
 8004c34:	2304      	movs	r3, #4
 8004c36:	76fb      	strb	r3, [r7, #27]
 8004c38:	e0e1      	b.n	8004dfe <UART_SetConfig+0x282>
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	76fb      	strb	r3, [r7, #27]
 8004c3e:	e0de      	b.n	8004dfe <UART_SetConfig+0x282>
 8004c40:	2310      	movs	r3, #16
 8004c42:	76fb      	strb	r3, [r7, #27]
 8004c44:	e0db      	b.n	8004dfe <UART_SetConfig+0x282>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a88      	ldr	r2, [pc, #544]	; (8004e6c <UART_SetConfig+0x2f0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d132      	bne.n	8004cb6 <UART_SetConfig+0x13a>
 8004c50:	4b85      	ldr	r3, [pc, #532]	; (8004e68 <UART_SetConfig+0x2ec>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c56:	f003 030c 	and.w	r3, r3, #12
 8004c5a:	2b0c      	cmp	r3, #12
 8004c5c:	d828      	bhi.n	8004cb0 <UART_SetConfig+0x134>
 8004c5e:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <UART_SetConfig+0xe8>)
 8004c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c64:	08004c99 	.word	0x08004c99
 8004c68:	08004cb1 	.word	0x08004cb1
 8004c6c:	08004cb1 	.word	0x08004cb1
 8004c70:	08004cb1 	.word	0x08004cb1
 8004c74:	08004ca5 	.word	0x08004ca5
 8004c78:	08004cb1 	.word	0x08004cb1
 8004c7c:	08004cb1 	.word	0x08004cb1
 8004c80:	08004cb1 	.word	0x08004cb1
 8004c84:	08004c9f 	.word	0x08004c9f
 8004c88:	08004cb1 	.word	0x08004cb1
 8004c8c:	08004cb1 	.word	0x08004cb1
 8004c90:	08004cb1 	.word	0x08004cb1
 8004c94:	08004cab 	.word	0x08004cab
 8004c98:	2300      	movs	r3, #0
 8004c9a:	76fb      	strb	r3, [r7, #27]
 8004c9c:	e0af      	b.n	8004dfe <UART_SetConfig+0x282>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	76fb      	strb	r3, [r7, #27]
 8004ca2:	e0ac      	b.n	8004dfe <UART_SetConfig+0x282>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	76fb      	strb	r3, [r7, #27]
 8004ca8:	e0a9      	b.n	8004dfe <UART_SetConfig+0x282>
 8004caa:	2308      	movs	r3, #8
 8004cac:	76fb      	strb	r3, [r7, #27]
 8004cae:	e0a6      	b.n	8004dfe <UART_SetConfig+0x282>
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	76fb      	strb	r3, [r7, #27]
 8004cb4:	e0a3      	b.n	8004dfe <UART_SetConfig+0x282>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a6d      	ldr	r2, [pc, #436]	; (8004e70 <UART_SetConfig+0x2f4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d120      	bne.n	8004d02 <UART_SetConfig+0x186>
 8004cc0:	4b69      	ldr	r3, [pc, #420]	; (8004e68 <UART_SetConfig+0x2ec>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cca:	2b30      	cmp	r3, #48	; 0x30
 8004ccc:	d013      	beq.n	8004cf6 <UART_SetConfig+0x17a>
 8004cce:	2b30      	cmp	r3, #48	; 0x30
 8004cd0:	d814      	bhi.n	8004cfc <UART_SetConfig+0x180>
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d009      	beq.n	8004cea <UART_SetConfig+0x16e>
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d810      	bhi.n	8004cfc <UART_SetConfig+0x180>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <UART_SetConfig+0x168>
 8004cde:	2b10      	cmp	r3, #16
 8004ce0:	d006      	beq.n	8004cf0 <UART_SetConfig+0x174>
 8004ce2:	e00b      	b.n	8004cfc <UART_SetConfig+0x180>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	76fb      	strb	r3, [r7, #27]
 8004ce8:	e089      	b.n	8004dfe <UART_SetConfig+0x282>
 8004cea:	2302      	movs	r3, #2
 8004cec:	76fb      	strb	r3, [r7, #27]
 8004cee:	e086      	b.n	8004dfe <UART_SetConfig+0x282>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	76fb      	strb	r3, [r7, #27]
 8004cf4:	e083      	b.n	8004dfe <UART_SetConfig+0x282>
 8004cf6:	2308      	movs	r3, #8
 8004cf8:	76fb      	strb	r3, [r7, #27]
 8004cfa:	e080      	b.n	8004dfe <UART_SetConfig+0x282>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	76fb      	strb	r3, [r7, #27]
 8004d00:	e07d      	b.n	8004dfe <UART_SetConfig+0x282>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a5b      	ldr	r2, [pc, #364]	; (8004e74 <UART_SetConfig+0x2f8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d120      	bne.n	8004d4e <UART_SetConfig+0x1d2>
 8004d0c:	4b56      	ldr	r3, [pc, #344]	; (8004e68 <UART_SetConfig+0x2ec>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d16:	2bc0      	cmp	r3, #192	; 0xc0
 8004d18:	d013      	beq.n	8004d42 <UART_SetConfig+0x1c6>
 8004d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d1c:	d814      	bhi.n	8004d48 <UART_SetConfig+0x1cc>
 8004d1e:	2b80      	cmp	r3, #128	; 0x80
 8004d20:	d009      	beq.n	8004d36 <UART_SetConfig+0x1ba>
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d810      	bhi.n	8004d48 <UART_SetConfig+0x1cc>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <UART_SetConfig+0x1b4>
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d006      	beq.n	8004d3c <UART_SetConfig+0x1c0>
 8004d2e:	e00b      	b.n	8004d48 <UART_SetConfig+0x1cc>
 8004d30:	2300      	movs	r3, #0
 8004d32:	76fb      	strb	r3, [r7, #27]
 8004d34:	e063      	b.n	8004dfe <UART_SetConfig+0x282>
 8004d36:	2302      	movs	r3, #2
 8004d38:	76fb      	strb	r3, [r7, #27]
 8004d3a:	e060      	b.n	8004dfe <UART_SetConfig+0x282>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	76fb      	strb	r3, [r7, #27]
 8004d40:	e05d      	b.n	8004dfe <UART_SetConfig+0x282>
 8004d42:	2308      	movs	r3, #8
 8004d44:	76fb      	strb	r3, [r7, #27]
 8004d46:	e05a      	b.n	8004dfe <UART_SetConfig+0x282>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	76fb      	strb	r3, [r7, #27]
 8004d4c:	e057      	b.n	8004dfe <UART_SetConfig+0x282>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a49      	ldr	r2, [pc, #292]	; (8004e78 <UART_SetConfig+0x2fc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d125      	bne.n	8004da4 <UART_SetConfig+0x228>
 8004d58:	4b43      	ldr	r3, [pc, #268]	; (8004e68 <UART_SetConfig+0x2ec>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d66:	d017      	beq.n	8004d98 <UART_SetConfig+0x21c>
 8004d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d6c:	d817      	bhi.n	8004d9e <UART_SetConfig+0x222>
 8004d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d72:	d00b      	beq.n	8004d8c <UART_SetConfig+0x210>
 8004d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d78:	d811      	bhi.n	8004d9e <UART_SetConfig+0x222>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <UART_SetConfig+0x20a>
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d82:	d006      	beq.n	8004d92 <UART_SetConfig+0x216>
 8004d84:	e00b      	b.n	8004d9e <UART_SetConfig+0x222>
 8004d86:	2300      	movs	r3, #0
 8004d88:	76fb      	strb	r3, [r7, #27]
 8004d8a:	e038      	b.n	8004dfe <UART_SetConfig+0x282>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	76fb      	strb	r3, [r7, #27]
 8004d90:	e035      	b.n	8004dfe <UART_SetConfig+0x282>
 8004d92:	2304      	movs	r3, #4
 8004d94:	76fb      	strb	r3, [r7, #27]
 8004d96:	e032      	b.n	8004dfe <UART_SetConfig+0x282>
 8004d98:	2308      	movs	r3, #8
 8004d9a:	76fb      	strb	r3, [r7, #27]
 8004d9c:	e02f      	b.n	8004dfe <UART_SetConfig+0x282>
 8004d9e:	2310      	movs	r3, #16
 8004da0:	76fb      	strb	r3, [r7, #27]
 8004da2:	e02c      	b.n	8004dfe <UART_SetConfig+0x282>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a2d      	ldr	r2, [pc, #180]	; (8004e60 <UART_SetConfig+0x2e4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d125      	bne.n	8004dfa <UART_SetConfig+0x27e>
 8004dae:	4b2e      	ldr	r3, [pc, #184]	; (8004e68 <UART_SetConfig+0x2ec>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dbc:	d017      	beq.n	8004dee <UART_SetConfig+0x272>
 8004dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dc2:	d817      	bhi.n	8004df4 <UART_SetConfig+0x278>
 8004dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc8:	d00b      	beq.n	8004de2 <UART_SetConfig+0x266>
 8004dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dce:	d811      	bhi.n	8004df4 <UART_SetConfig+0x278>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <UART_SetConfig+0x260>
 8004dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd8:	d006      	beq.n	8004de8 <UART_SetConfig+0x26c>
 8004dda:	e00b      	b.n	8004df4 <UART_SetConfig+0x278>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	76fb      	strb	r3, [r7, #27]
 8004de0:	e00d      	b.n	8004dfe <UART_SetConfig+0x282>
 8004de2:	2302      	movs	r3, #2
 8004de4:	76fb      	strb	r3, [r7, #27]
 8004de6:	e00a      	b.n	8004dfe <UART_SetConfig+0x282>
 8004de8:	2304      	movs	r3, #4
 8004dea:	76fb      	strb	r3, [r7, #27]
 8004dec:	e007      	b.n	8004dfe <UART_SetConfig+0x282>
 8004dee:	2308      	movs	r3, #8
 8004df0:	76fb      	strb	r3, [r7, #27]
 8004df2:	e004      	b.n	8004dfe <UART_SetConfig+0x282>
 8004df4:	2310      	movs	r3, #16
 8004df6:	76fb      	strb	r3, [r7, #27]
 8004df8:	e001      	b.n	8004dfe <UART_SetConfig+0x282>
 8004dfa:	2310      	movs	r3, #16
 8004dfc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a17      	ldr	r2, [pc, #92]	; (8004e60 <UART_SetConfig+0x2e4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	f040 8087 	bne.w	8004f18 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e0a:	7efb      	ldrb	r3, [r7, #27]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d837      	bhi.n	8004e80 <UART_SetConfig+0x304>
 8004e10:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <UART_SetConfig+0x29c>)
 8004e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e16:	bf00      	nop
 8004e18:	08004e3d 	.word	0x08004e3d
 8004e1c:	08004e81 	.word	0x08004e81
 8004e20:	08004e45 	.word	0x08004e45
 8004e24:	08004e81 	.word	0x08004e81
 8004e28:	08004e4b 	.word	0x08004e4b
 8004e2c:	08004e81 	.word	0x08004e81
 8004e30:	08004e81 	.word	0x08004e81
 8004e34:	08004e81 	.word	0x08004e81
 8004e38:	08004e53 	.word	0x08004e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e3c:	f7ff f868 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 8004e40:	6178      	str	r0, [r7, #20]
        break;
 8004e42:	e022      	b.n	8004e8a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e44:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <UART_SetConfig+0x300>)
 8004e46:	617b      	str	r3, [r7, #20]
        break;
 8004e48:	e01f      	b.n	8004e8a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e4a:	f7fe ffc9 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8004e4e:	6178      	str	r0, [r7, #20]
        break;
 8004e50:	e01b      	b.n	8004e8a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e56:	617b      	str	r3, [r7, #20]
        break;
 8004e58:	e017      	b.n	8004e8a <UART_SetConfig+0x30e>
 8004e5a:	bf00      	nop
 8004e5c:	efff69f3 	.word	0xefff69f3
 8004e60:	40008000 	.word	0x40008000
 8004e64:	40013800 	.word	0x40013800
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	40004400 	.word	0x40004400
 8004e70:	40004800 	.word	0x40004800
 8004e74:	40004c00 	.word	0x40004c00
 8004e78:	40005000 	.word	0x40005000
 8004e7c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	76bb      	strb	r3, [r7, #26]
        break;
 8004e88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80f1 	beq.w	8005074 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	4413      	add	r3, r2
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d305      	bcc.n	8004eae <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d902      	bls.n	8004eb4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	76bb      	strb	r3, [r7, #26]
 8004eb2:	e0df      	b.n	8005074 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f04f 0100 	mov.w	r1, #0
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	020b      	lsls	r3, r1, #8
 8004ec6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004eca:	0202      	lsls	r2, r0, #8
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	6849      	ldr	r1, [r1, #4]
 8004ed0:	0849      	lsrs	r1, r1, #1
 8004ed2:	4608      	mov	r0, r1
 8004ed4:	f04f 0100 	mov.w	r1, #0
 8004ed8:	1814      	adds	r4, r2, r0
 8004eda:	eb43 0501 	adc.w	r5, r3, r1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	4620      	mov	r0, r4
 8004eea:	4629      	mov	r1, r5
 8004eec:	f7fb fde6 	bl	8000abc <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004efe:	d308      	bcc.n	8004f12 <UART_SetConfig+0x396>
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f06:	d204      	bcs.n	8004f12 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	60da      	str	r2, [r3, #12]
 8004f10:	e0b0      	b.n	8005074 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	76bb      	strb	r3, [r7, #26]
 8004f16:	e0ad      	b.n	8005074 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f20:	d15b      	bne.n	8004fda <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004f22:	7efb      	ldrb	r3, [r7, #27]
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d828      	bhi.n	8004f7a <UART_SetConfig+0x3fe>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <UART_SetConfig+0x3b4>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f5d 	.word	0x08004f5d
 8004f38:	08004f65 	.word	0x08004f65
 8004f3c:	08004f7b 	.word	0x08004f7b
 8004f40:	08004f6b 	.word	0x08004f6b
 8004f44:	08004f7b 	.word	0x08004f7b
 8004f48:	08004f7b 	.word	0x08004f7b
 8004f4c:	08004f7b 	.word	0x08004f7b
 8004f50:	08004f73 	.word	0x08004f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f54:	f7fe ffdc 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 8004f58:	6178      	str	r0, [r7, #20]
        break;
 8004f5a:	e013      	b.n	8004f84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f5c:	f7fe ffee 	bl	8003f3c <HAL_RCC_GetPCLK2Freq>
 8004f60:	6178      	str	r0, [r7, #20]
        break;
 8004f62:	e00f      	b.n	8004f84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f64:	4b49      	ldr	r3, [pc, #292]	; (800508c <UART_SetConfig+0x510>)
 8004f66:	617b      	str	r3, [r7, #20]
        break;
 8004f68:	e00c      	b.n	8004f84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f6a:	f7fe ff39 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8004f6e:	6178      	str	r0, [r7, #20]
        break;
 8004f70:	e008      	b.n	8004f84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f76:	617b      	str	r3, [r7, #20]
        break;
 8004f78:	e004      	b.n	8004f84 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	76bb      	strb	r3, [r7, #26]
        break;
 8004f82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d074      	beq.n	8005074 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	005a      	lsls	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	085b      	lsrs	r3, r3, #1
 8004f94:	441a      	add	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b0f      	cmp	r3, #15
 8004fa4:	d916      	bls.n	8004fd4 <UART_SetConfig+0x458>
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fac:	d212      	bcs.n	8004fd4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f023 030f 	bic.w	r3, r3, #15
 8004fb6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	89fb      	ldrh	r3, [r7, #14]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	89fa      	ldrh	r2, [r7, #14]
 8004fd0:	60da      	str	r2, [r3, #12]
 8004fd2:	e04f      	b.n	8005074 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	76bb      	strb	r3, [r7, #26]
 8004fd8:	e04c      	b.n	8005074 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fda:	7efb      	ldrb	r3, [r7, #27]
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d828      	bhi.n	8005032 <UART_SetConfig+0x4b6>
 8004fe0:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <UART_SetConfig+0x46c>)
 8004fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe6:	bf00      	nop
 8004fe8:	0800500d 	.word	0x0800500d
 8004fec:	08005015 	.word	0x08005015
 8004ff0:	0800501d 	.word	0x0800501d
 8004ff4:	08005033 	.word	0x08005033
 8004ff8:	08005023 	.word	0x08005023
 8004ffc:	08005033 	.word	0x08005033
 8005000:	08005033 	.word	0x08005033
 8005004:	08005033 	.word	0x08005033
 8005008:	0800502b 	.word	0x0800502b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800500c:	f7fe ff80 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 8005010:	6178      	str	r0, [r7, #20]
        break;
 8005012:	e013      	b.n	800503c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005014:	f7fe ff92 	bl	8003f3c <HAL_RCC_GetPCLK2Freq>
 8005018:	6178      	str	r0, [r7, #20]
        break;
 800501a:	e00f      	b.n	800503c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800501c:	4b1b      	ldr	r3, [pc, #108]	; (800508c <UART_SetConfig+0x510>)
 800501e:	617b      	str	r3, [r7, #20]
        break;
 8005020:	e00c      	b.n	800503c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005022:	f7fe fedd 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8005026:	6178      	str	r0, [r7, #20]
        break;
 8005028:	e008      	b.n	800503c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800502a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800502e:	617b      	str	r3, [r7, #20]
        break;
 8005030:	e004      	b.n	800503c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	76bb      	strb	r3, [r7, #26]
        break;
 800503a:	bf00      	nop
    }

    if (pclk != 0U)
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d018      	beq.n	8005074 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	085a      	lsrs	r2, r3, #1
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	441a      	add	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	fbb2 f3f3 	udiv	r3, r2, r3
 8005054:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b0f      	cmp	r3, #15
 800505a:	d909      	bls.n	8005070 <UART_SetConfig+0x4f4>
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005062:	d205      	bcs.n	8005070 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	e001      	b.n	8005074 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005080:	7ebb      	ldrb	r3, [r7, #26]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3720      	adds	r7, #32
 8005086:	46bd      	mov	sp, r7
 8005088:	bdb0      	pop	{r4, r5, r7, pc}
 800508a:	bf00      	nop
 800508c:	00f42400 	.word	0x00f42400

08005090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01a      	beq.n	80051a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800518e:	d10a      	bne.n	80051a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  }
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af02      	add	r7, sp, #8
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051e4:	f7fd f970 	bl	80024c8 <HAL_GetTick>
 80051e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d10e      	bne.n	8005216 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f82d 	bl	8005266 <UART_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e023      	b.n	800525e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b04      	cmp	r3, #4
 8005222:	d10e      	bne.n	8005242 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f817 	bl	8005266 <UART_WaitOnFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e00d      	b.n	800525e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b09c      	sub	sp, #112	; 0x70
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005276:	e0a5      	b.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800527a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800527e:	f000 80a1 	beq.w	80053c4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005282:	f7fd f921 	bl	80024c8 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800528e:	429a      	cmp	r2, r3
 8005290:	d302      	bcc.n	8005298 <UART_WaitOnFlagUntilTimeout+0x32>
 8005292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005294:	2b00      	cmp	r3, #0
 8005296:	d13e      	bne.n	8005316 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052ac:	667b      	str	r3, [r7, #100]	; 0x64
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e6      	bne.n	8005298 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3308      	adds	r3, #8
 80052d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	f023 0301 	bic.w	r3, r3, #1
 80052e0:	663b      	str	r3, [r7, #96]	; 0x60
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3308      	adds	r3, #8
 80052e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80052ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e5      	bne.n	80052ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e067      	b.n	80053e6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d04f      	beq.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800532e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005332:	d147      	bne.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800533c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005352:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535c:	637b      	str	r3, [r7, #52]	; 0x34
 800535e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e6      	bne.n	800533e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3308      	adds	r3, #8
 8005376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	613b      	str	r3, [r7, #16]
   return(result);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f023 0301 	bic.w	r3, r3, #1
 8005386:	66bb      	str	r3, [r7, #104]	; 0x68
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3308      	adds	r3, #8
 800538e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005390:	623a      	str	r2, [r7, #32]
 8005392:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	69f9      	ldr	r1, [r7, #28]
 8005396:	6a3a      	ldr	r2, [r7, #32]
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	61bb      	str	r3, [r7, #24]
   return(result);
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e5      	bne.n	8005370 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2220      	movs	r2, #32
 80053a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e010      	b.n	80053e6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4013      	ands	r3, r2
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	bf0c      	ite	eq
 80053d4:	2301      	moveq	r3, #1
 80053d6:	2300      	movne	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	429a      	cmp	r2, r3
 80053e0:	f43f af4a 	beq.w	8005278 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3770      	adds	r7, #112	; 0x70
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b097      	sub	sp, #92	; 0x5c
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	4613      	mov	r3, r2
 80053fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	88fa      	ldrh	r2, [r7, #6]
 8005408:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	88fa      	ldrh	r2, [r7, #6]
 8005410:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005422:	d10e      	bne.n	8005442 <UART_Start_Receive_IT+0x52>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d105      	bne.n	8005438 <UART_Start_Receive_IT+0x48>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005432:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005436:	e02d      	b.n	8005494 <UART_Start_Receive_IT+0xa4>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	22ff      	movs	r2, #255	; 0xff
 800543c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005440:	e028      	b.n	8005494 <UART_Start_Receive_IT+0xa4>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10d      	bne.n	8005466 <UART_Start_Receive_IT+0x76>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <UART_Start_Receive_IT+0x6c>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	22ff      	movs	r2, #255	; 0xff
 8005456:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800545a:	e01b      	b.n	8005494 <UART_Start_Receive_IT+0xa4>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	227f      	movs	r2, #127	; 0x7f
 8005460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005464:	e016      	b.n	8005494 <UART_Start_Receive_IT+0xa4>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800546e:	d10d      	bne.n	800548c <UART_Start_Receive_IT+0x9c>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d104      	bne.n	8005482 <UART_Start_Receive_IT+0x92>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	227f      	movs	r2, #127	; 0x7f
 800547c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005480:	e008      	b.n	8005494 <UART_Start_Receive_IT+0xa4>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	223f      	movs	r2, #63	; 0x3f
 8005486:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800548a:	e003      	b.n	8005494 <UART_Start_Receive_IT+0xa4>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2222      	movs	r2, #34	; 0x22
 80054a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3308      	adds	r3, #8
 80054a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	657b      	str	r3, [r7, #84]	; 0x54
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3308      	adds	r3, #8
 80054c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80054c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e5      	bne.n	80054a2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054de:	d107      	bne.n	80054f0 <UART_Start_Receive_IT+0x100>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d103      	bne.n	80054f0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4a24      	ldr	r2, [pc, #144]	; (800557c <UART_Start_Receive_IT+0x18c>)
 80054ec:	665a      	str	r2, [r3, #100]	; 0x64
 80054ee:	e002      	b.n	80054f6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a23      	ldr	r2, [pc, #140]	; (8005580 <UART_Start_Receive_IT+0x190>)
 80054f4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d019      	beq.n	800553a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800551a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005524:	637b      	str	r3, [r7, #52]	; 0x34
 8005526:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800552a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e6      	bne.n	8005506 <UART_Start_Receive_IT+0x116>
 8005538:	e018      	b.n	800556c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	613b      	str	r3, [r7, #16]
   return(result);
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f043 0320 	orr.w	r3, r3, #32
 800554e:	653b      	str	r3, [r7, #80]	; 0x50
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005558:	623b      	str	r3, [r7, #32]
 800555a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	69f9      	ldr	r1, [r7, #28]
 800555e:	6a3a      	ldr	r2, [r7, #32]
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	61bb      	str	r3, [r7, #24]
   return(result);
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e6      	bne.n	800553a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	375c      	adds	r7, #92	; 0x5c
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	080056e5 	.word	0x080056e5
 8005580:	08005585 	.word	0x08005585

08005584 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b096      	sub	sp, #88	; 0x58
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005592:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800559a:	2b22      	cmp	r3, #34	; 0x22
 800559c:	f040 8094 	bne.w	80056c8 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055a6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055aa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80055ae:	b2d9      	uxtb	r1, r3
 80055b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	400a      	ands	r2, r1
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d179      	bne.n	80056dc <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055fc:	653b      	str	r3, [r7, #80]	; 0x50
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005606:	647b      	str	r3, [r7, #68]	; 0x44
 8005608:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800560c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e6      	bne.n	80055e8 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3308      	adds	r3, #8
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	623b      	str	r3, [r7, #32]
   return(result);
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	f023 0301 	bic.w	r3, r3, #1
 8005630:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3308      	adds	r3, #8
 8005638:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800563a:	633a      	str	r2, [r7, #48]	; 0x30
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e5      	bne.n	800561a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565e:	2b01      	cmp	r3, #1
 8005660:	d12e      	bne.n	80056c0 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	60fb      	str	r3, [r7, #12]
   return(result);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f023 0310 	bic.w	r3, r3, #16
 800567c:	64bb      	str	r3, [r7, #72]	; 0x48
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005686:	61fb      	str	r3, [r7, #28]
 8005688:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	69b9      	ldr	r1, [r7, #24]
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	617b      	str	r3, [r7, #20]
   return(result);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e6      	bne.n	8005668 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d103      	bne.n	80056b0 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2210      	movs	r2, #16
 80056ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056b6:	4619      	mov	r1, r3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff fa53 	bl	8004b64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056be:	e00d      	b.n	80056dc <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff fa45 	bl	8004b50 <HAL_UART_RxCpltCallback>
}
 80056c6:	e009      	b.n	80056dc <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	8b1b      	ldrh	r3, [r3, #24]
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0208 	orr.w	r2, r2, #8
 80056d8:	b292      	uxth	r2, r2
 80056da:	831a      	strh	r2, [r3, #24]
}
 80056dc:	bf00      	nop
 80056de:	3758      	adds	r7, #88	; 0x58
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b096      	sub	sp, #88	; 0x58
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056f2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056fa:	2b22      	cmp	r3, #34	; 0x22
 80056fc:	f040 8094 	bne.w	8005828 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005706:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005710:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005714:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005718:	4013      	ands	r3, r2
 800571a:	b29a      	uxth	r2, r3
 800571c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800571e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	1c9a      	adds	r2, r3, #2
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d179      	bne.n	800583c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800575c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005766:	643b      	str	r3, [r7, #64]	; 0x40
 8005768:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800576c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e6      	bne.n	8005748 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3308      	adds	r3, #8
 8005780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	61fb      	str	r3, [r7, #28]
   return(result);
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	64bb      	str	r3, [r7, #72]	; 0x48
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3308      	adds	r3, #8
 8005798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800579a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800579c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e5      	bne.n	800577a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2220      	movs	r2, #32
 80057b2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d12e      	bne.n	8005820 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f023 0310 	bic.w	r3, r3, #16
 80057dc:	647b      	str	r3, [r7, #68]	; 0x44
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6979      	ldr	r1, [r7, #20]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	613b      	str	r3, [r7, #16]
   return(result);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e6      	bne.n	80057c8 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b10      	cmp	r3, #16
 8005806:	d103      	bne.n	8005810 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2210      	movs	r2, #16
 800580e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff f9a3 	bl	8004b64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800581e:	e00d      	b.n	800583c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff f995 	bl	8004b50 <HAL_UART_RxCpltCallback>
}
 8005826:	e009      	b.n	800583c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	8b1b      	ldrh	r3, [r3, #24]
 800582e:	b29a      	uxth	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 0208 	orr.w	r2, r2, #8
 8005838:	b292      	uxth	r2, r2
 800583a:	831a      	strh	r2, [r3, #24]
}
 800583c:	bf00      	nop
 800583e:	3758      	adds	r7, #88	; 0x58
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <arm_sin_f32>:
 8005844:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80058c4 <arm_sin_f32+0x80>
 8005848:	ee20 0a27 	vmul.f32	s0, s0, s15
 800584c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005854:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005858:	d504      	bpl.n	8005864 <arm_sin_f32+0x20>
 800585a:	ee17 3a90 	vmov	r3, s15
 800585e:	3b01      	subs	r3, #1
 8005860:	ee07 3a90 	vmov	s15, r3
 8005864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005868:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80058c8 <arm_sin_f32+0x84>
 800586c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005870:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005874:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005878:	ee17 3a90 	vmov	r3, s15
 800587c:	b29b      	uxth	r3, r3
 800587e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005882:	d21a      	bcs.n	80058ba <arm_sin_f32+0x76>
 8005884:	ee07 3a90 	vmov	s15, r3
 8005888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588c:	1c59      	adds	r1, r3, #1
 800588e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005892:	4a0e      	ldr	r2, [pc, #56]	; (80058cc <arm_sin_f32+0x88>)
 8005894:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800589c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80058a0:	ed93 7a00 	vldr	s14, [r3]
 80058a4:	edd2 6a00 	vldr	s13, [r2]
 80058a8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80058ac:	ee20 0a26 	vmul.f32	s0, s0, s13
 80058b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058b4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80058b8:	4770      	bx	lr
 80058ba:	ee30 0a47 	vsub.f32	s0, s0, s14
 80058be:	2101      	movs	r1, #1
 80058c0:	2300      	movs	r3, #0
 80058c2:	e7e6      	b.n	8005892 <arm_sin_f32+0x4e>
 80058c4:	3e22f983 	.word	0x3e22f983
 80058c8:	44000000 	.word	0x44000000
 80058cc:	08006350 	.word	0x08006350

080058d0 <__errno>:
 80058d0:	4b01      	ldr	r3, [pc, #4]	; (80058d8 <__errno+0x8>)
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	20000054 	.word	0x20000054

080058dc <__libc_init_array>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	4d0d      	ldr	r5, [pc, #52]	; (8005914 <__libc_init_array+0x38>)
 80058e0:	4c0d      	ldr	r4, [pc, #52]	; (8005918 <__libc_init_array+0x3c>)
 80058e2:	1b64      	subs	r4, r4, r5
 80058e4:	10a4      	asrs	r4, r4, #2
 80058e6:	2600      	movs	r6, #0
 80058e8:	42a6      	cmp	r6, r4
 80058ea:	d109      	bne.n	8005900 <__libc_init_array+0x24>
 80058ec:	4d0b      	ldr	r5, [pc, #44]	; (800591c <__libc_init_array+0x40>)
 80058ee:	4c0c      	ldr	r4, [pc, #48]	; (8005920 <__libc_init_array+0x44>)
 80058f0:	f000 fc4e 	bl	8006190 <_init>
 80058f4:	1b64      	subs	r4, r4, r5
 80058f6:	10a4      	asrs	r4, r4, #2
 80058f8:	2600      	movs	r6, #0
 80058fa:	42a6      	cmp	r6, r4
 80058fc:	d105      	bne.n	800590a <__libc_init_array+0x2e>
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	f855 3b04 	ldr.w	r3, [r5], #4
 8005904:	4798      	blx	r3
 8005906:	3601      	adds	r6, #1
 8005908:	e7ee      	b.n	80058e8 <__libc_init_array+0xc>
 800590a:	f855 3b04 	ldr.w	r3, [r5], #4
 800590e:	4798      	blx	r3
 8005910:	3601      	adds	r6, #1
 8005912:	e7f2      	b.n	80058fa <__libc_init_array+0x1e>
 8005914:	08006b90 	.word	0x08006b90
 8005918:	08006b90 	.word	0x08006b90
 800591c:	08006b90 	.word	0x08006b90
 8005920:	08006b94 	.word	0x08006b94

08005924 <memcpy>:
 8005924:	440a      	add	r2, r1
 8005926:	4291      	cmp	r1, r2
 8005928:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800592c:	d100      	bne.n	8005930 <memcpy+0xc>
 800592e:	4770      	bx	lr
 8005930:	b510      	push	{r4, lr}
 8005932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800593a:	4291      	cmp	r1, r2
 800593c:	d1f9      	bne.n	8005932 <memcpy+0xe>
 800593e:	bd10      	pop	{r4, pc}

08005940 <memset>:
 8005940:	4402      	add	r2, r0
 8005942:	4603      	mov	r3, r0
 8005944:	4293      	cmp	r3, r2
 8005946:	d100      	bne.n	800594a <memset+0xa>
 8005948:	4770      	bx	lr
 800594a:	f803 1b01 	strb.w	r1, [r3], #1
 800594e:	e7f9      	b.n	8005944 <memset+0x4>

08005950 <siprintf>:
 8005950:	b40e      	push	{r1, r2, r3}
 8005952:	b500      	push	{lr}
 8005954:	b09c      	sub	sp, #112	; 0x70
 8005956:	ab1d      	add	r3, sp, #116	; 0x74
 8005958:	9002      	str	r0, [sp, #8]
 800595a:	9006      	str	r0, [sp, #24]
 800595c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005960:	4809      	ldr	r0, [pc, #36]	; (8005988 <siprintf+0x38>)
 8005962:	9107      	str	r1, [sp, #28]
 8005964:	9104      	str	r1, [sp, #16]
 8005966:	4909      	ldr	r1, [pc, #36]	; (800598c <siprintf+0x3c>)
 8005968:	f853 2b04 	ldr.w	r2, [r3], #4
 800596c:	9105      	str	r1, [sp, #20]
 800596e:	6800      	ldr	r0, [r0, #0]
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	a902      	add	r1, sp, #8
 8005974:	f000 f868 	bl	8005a48 <_svfiprintf_r>
 8005978:	9b02      	ldr	r3, [sp, #8]
 800597a:	2200      	movs	r2, #0
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	b01c      	add	sp, #112	; 0x70
 8005980:	f85d eb04 	ldr.w	lr, [sp], #4
 8005984:	b003      	add	sp, #12
 8005986:	4770      	bx	lr
 8005988:	20000054 	.word	0x20000054
 800598c:	ffff0208 	.word	0xffff0208

08005990 <__ssputs_r>:
 8005990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005994:	688e      	ldr	r6, [r1, #8]
 8005996:	429e      	cmp	r6, r3
 8005998:	4682      	mov	sl, r0
 800599a:	460c      	mov	r4, r1
 800599c:	4690      	mov	r8, r2
 800599e:	461f      	mov	r7, r3
 80059a0:	d838      	bhi.n	8005a14 <__ssputs_r+0x84>
 80059a2:	898a      	ldrh	r2, [r1, #12]
 80059a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059a8:	d032      	beq.n	8005a10 <__ssputs_r+0x80>
 80059aa:	6825      	ldr	r5, [r4, #0]
 80059ac:	6909      	ldr	r1, [r1, #16]
 80059ae:	eba5 0901 	sub.w	r9, r5, r1
 80059b2:	6965      	ldr	r5, [r4, #20]
 80059b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059bc:	3301      	adds	r3, #1
 80059be:	444b      	add	r3, r9
 80059c0:	106d      	asrs	r5, r5, #1
 80059c2:	429d      	cmp	r5, r3
 80059c4:	bf38      	it	cc
 80059c6:	461d      	movcc	r5, r3
 80059c8:	0553      	lsls	r3, r2, #21
 80059ca:	d531      	bpl.n	8005a30 <__ssputs_r+0xa0>
 80059cc:	4629      	mov	r1, r5
 80059ce:	f000 fb39 	bl	8006044 <_malloc_r>
 80059d2:	4606      	mov	r6, r0
 80059d4:	b950      	cbnz	r0, 80059ec <__ssputs_r+0x5c>
 80059d6:	230c      	movs	r3, #12
 80059d8:	f8ca 3000 	str.w	r3, [sl]
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059e2:	81a3      	strh	r3, [r4, #12]
 80059e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ec:	6921      	ldr	r1, [r4, #16]
 80059ee:	464a      	mov	r2, r9
 80059f0:	f7ff ff98 	bl	8005924 <memcpy>
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fe:	81a3      	strh	r3, [r4, #12]
 8005a00:	6126      	str	r6, [r4, #16]
 8005a02:	6165      	str	r5, [r4, #20]
 8005a04:	444e      	add	r6, r9
 8005a06:	eba5 0509 	sub.w	r5, r5, r9
 8005a0a:	6026      	str	r6, [r4, #0]
 8005a0c:	60a5      	str	r5, [r4, #8]
 8005a0e:	463e      	mov	r6, r7
 8005a10:	42be      	cmp	r6, r7
 8005a12:	d900      	bls.n	8005a16 <__ssputs_r+0x86>
 8005a14:	463e      	mov	r6, r7
 8005a16:	4632      	mov	r2, r6
 8005a18:	6820      	ldr	r0, [r4, #0]
 8005a1a:	4641      	mov	r1, r8
 8005a1c:	f000 faa8 	bl	8005f70 <memmove>
 8005a20:	68a3      	ldr	r3, [r4, #8]
 8005a22:	6822      	ldr	r2, [r4, #0]
 8005a24:	1b9b      	subs	r3, r3, r6
 8005a26:	4432      	add	r2, r6
 8005a28:	60a3      	str	r3, [r4, #8]
 8005a2a:	6022      	str	r2, [r4, #0]
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	e7db      	b.n	80059e8 <__ssputs_r+0x58>
 8005a30:	462a      	mov	r2, r5
 8005a32:	f000 fb61 	bl	80060f8 <_realloc_r>
 8005a36:	4606      	mov	r6, r0
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d1e1      	bne.n	8005a00 <__ssputs_r+0x70>
 8005a3c:	6921      	ldr	r1, [r4, #16]
 8005a3e:	4650      	mov	r0, sl
 8005a40:	f000 fab0 	bl	8005fa4 <_free_r>
 8005a44:	e7c7      	b.n	80059d6 <__ssputs_r+0x46>
	...

08005a48 <_svfiprintf_r>:
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	4698      	mov	r8, r3
 8005a4e:	898b      	ldrh	r3, [r1, #12]
 8005a50:	061b      	lsls	r3, r3, #24
 8005a52:	b09d      	sub	sp, #116	; 0x74
 8005a54:	4607      	mov	r7, r0
 8005a56:	460d      	mov	r5, r1
 8005a58:	4614      	mov	r4, r2
 8005a5a:	d50e      	bpl.n	8005a7a <_svfiprintf_r+0x32>
 8005a5c:	690b      	ldr	r3, [r1, #16]
 8005a5e:	b963      	cbnz	r3, 8005a7a <_svfiprintf_r+0x32>
 8005a60:	2140      	movs	r1, #64	; 0x40
 8005a62:	f000 faef 	bl	8006044 <_malloc_r>
 8005a66:	6028      	str	r0, [r5, #0]
 8005a68:	6128      	str	r0, [r5, #16]
 8005a6a:	b920      	cbnz	r0, 8005a76 <_svfiprintf_r+0x2e>
 8005a6c:	230c      	movs	r3, #12
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a74:	e0d1      	b.n	8005c1a <_svfiprintf_r+0x1d2>
 8005a76:	2340      	movs	r3, #64	; 0x40
 8005a78:	616b      	str	r3, [r5, #20]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a7e:	2320      	movs	r3, #32
 8005a80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a84:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a88:	2330      	movs	r3, #48	; 0x30
 8005a8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005c34 <_svfiprintf_r+0x1ec>
 8005a8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a92:	f04f 0901 	mov.w	r9, #1
 8005a96:	4623      	mov	r3, r4
 8005a98:	469a      	mov	sl, r3
 8005a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a9e:	b10a      	cbz	r2, 8005aa4 <_svfiprintf_r+0x5c>
 8005aa0:	2a25      	cmp	r2, #37	; 0x25
 8005aa2:	d1f9      	bne.n	8005a98 <_svfiprintf_r+0x50>
 8005aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8005aa8:	d00b      	beq.n	8005ac2 <_svfiprintf_r+0x7a>
 8005aaa:	465b      	mov	r3, fp
 8005aac:	4622      	mov	r2, r4
 8005aae:	4629      	mov	r1, r5
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	f7ff ff6d 	bl	8005990 <__ssputs_r>
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	f000 80aa 	beq.w	8005c10 <_svfiprintf_r+0x1c8>
 8005abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005abe:	445a      	add	r2, fp
 8005ac0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 80a2 	beq.w	8005c10 <_svfiprintf_r+0x1c8>
 8005acc:	2300      	movs	r3, #0
 8005ace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ad6:	f10a 0a01 	add.w	sl, sl, #1
 8005ada:	9304      	str	r3, [sp, #16]
 8005adc:	9307      	str	r3, [sp, #28]
 8005ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8005ae4:	4654      	mov	r4, sl
 8005ae6:	2205      	movs	r2, #5
 8005ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aec:	4851      	ldr	r0, [pc, #324]	; (8005c34 <_svfiprintf_r+0x1ec>)
 8005aee:	f7fa fb77 	bl	80001e0 <memchr>
 8005af2:	9a04      	ldr	r2, [sp, #16]
 8005af4:	b9d8      	cbnz	r0, 8005b2e <_svfiprintf_r+0xe6>
 8005af6:	06d0      	lsls	r0, r2, #27
 8005af8:	bf44      	itt	mi
 8005afa:	2320      	movmi	r3, #32
 8005afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b00:	0711      	lsls	r1, r2, #28
 8005b02:	bf44      	itt	mi
 8005b04:	232b      	movmi	r3, #43	; 0x2b
 8005b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b10:	d015      	beq.n	8005b3e <_svfiprintf_r+0xf6>
 8005b12:	9a07      	ldr	r2, [sp, #28]
 8005b14:	4654      	mov	r4, sl
 8005b16:	2000      	movs	r0, #0
 8005b18:	f04f 0c0a 	mov.w	ip, #10
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b22:	3b30      	subs	r3, #48	; 0x30
 8005b24:	2b09      	cmp	r3, #9
 8005b26:	d94e      	bls.n	8005bc6 <_svfiprintf_r+0x17e>
 8005b28:	b1b0      	cbz	r0, 8005b58 <_svfiprintf_r+0x110>
 8005b2a:	9207      	str	r2, [sp, #28]
 8005b2c:	e014      	b.n	8005b58 <_svfiprintf_r+0x110>
 8005b2e:	eba0 0308 	sub.w	r3, r0, r8
 8005b32:	fa09 f303 	lsl.w	r3, r9, r3
 8005b36:	4313      	orrs	r3, r2
 8005b38:	9304      	str	r3, [sp, #16]
 8005b3a:	46a2      	mov	sl, r4
 8005b3c:	e7d2      	b.n	8005ae4 <_svfiprintf_r+0x9c>
 8005b3e:	9b03      	ldr	r3, [sp, #12]
 8005b40:	1d19      	adds	r1, r3, #4
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	9103      	str	r1, [sp, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bfbb      	ittet	lt
 8005b4a:	425b      	neglt	r3, r3
 8005b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8005b50:	9307      	strge	r3, [sp, #28]
 8005b52:	9307      	strlt	r3, [sp, #28]
 8005b54:	bfb8      	it	lt
 8005b56:	9204      	strlt	r2, [sp, #16]
 8005b58:	7823      	ldrb	r3, [r4, #0]
 8005b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8005b5c:	d10c      	bne.n	8005b78 <_svfiprintf_r+0x130>
 8005b5e:	7863      	ldrb	r3, [r4, #1]
 8005b60:	2b2a      	cmp	r3, #42	; 0x2a
 8005b62:	d135      	bne.n	8005bd0 <_svfiprintf_r+0x188>
 8005b64:	9b03      	ldr	r3, [sp, #12]
 8005b66:	1d1a      	adds	r2, r3, #4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	9203      	str	r2, [sp, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bfb8      	it	lt
 8005b70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b74:	3402      	adds	r4, #2
 8005b76:	9305      	str	r3, [sp, #20]
 8005b78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c44 <_svfiprintf_r+0x1fc>
 8005b7c:	7821      	ldrb	r1, [r4, #0]
 8005b7e:	2203      	movs	r2, #3
 8005b80:	4650      	mov	r0, sl
 8005b82:	f7fa fb2d 	bl	80001e0 <memchr>
 8005b86:	b140      	cbz	r0, 8005b9a <_svfiprintf_r+0x152>
 8005b88:	2340      	movs	r3, #64	; 0x40
 8005b8a:	eba0 000a 	sub.w	r0, r0, sl
 8005b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8005b92:	9b04      	ldr	r3, [sp, #16]
 8005b94:	4303      	orrs	r3, r0
 8005b96:	3401      	adds	r4, #1
 8005b98:	9304      	str	r3, [sp, #16]
 8005b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b9e:	4826      	ldr	r0, [pc, #152]	; (8005c38 <_svfiprintf_r+0x1f0>)
 8005ba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ba4:	2206      	movs	r2, #6
 8005ba6:	f7fa fb1b 	bl	80001e0 <memchr>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d038      	beq.n	8005c20 <_svfiprintf_r+0x1d8>
 8005bae:	4b23      	ldr	r3, [pc, #140]	; (8005c3c <_svfiprintf_r+0x1f4>)
 8005bb0:	bb1b      	cbnz	r3, 8005bfa <_svfiprintf_r+0x1b2>
 8005bb2:	9b03      	ldr	r3, [sp, #12]
 8005bb4:	3307      	adds	r3, #7
 8005bb6:	f023 0307 	bic.w	r3, r3, #7
 8005bba:	3308      	adds	r3, #8
 8005bbc:	9303      	str	r3, [sp, #12]
 8005bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc0:	4433      	add	r3, r6
 8005bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc4:	e767      	b.n	8005a96 <_svfiprintf_r+0x4e>
 8005bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bca:	460c      	mov	r4, r1
 8005bcc:	2001      	movs	r0, #1
 8005bce:	e7a5      	b.n	8005b1c <_svfiprintf_r+0xd4>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	3401      	adds	r4, #1
 8005bd4:	9305      	str	r3, [sp, #20]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	f04f 0c0a 	mov.w	ip, #10
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005be2:	3a30      	subs	r2, #48	; 0x30
 8005be4:	2a09      	cmp	r2, #9
 8005be6:	d903      	bls.n	8005bf0 <_svfiprintf_r+0x1a8>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0c5      	beq.n	8005b78 <_svfiprintf_r+0x130>
 8005bec:	9105      	str	r1, [sp, #20]
 8005bee:	e7c3      	b.n	8005b78 <_svfiprintf_r+0x130>
 8005bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e7f0      	b.n	8005bdc <_svfiprintf_r+0x194>
 8005bfa:	ab03      	add	r3, sp, #12
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	462a      	mov	r2, r5
 8005c00:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <_svfiprintf_r+0x1f8>)
 8005c02:	a904      	add	r1, sp, #16
 8005c04:	4638      	mov	r0, r7
 8005c06:	f3af 8000 	nop.w
 8005c0a:	1c42      	adds	r2, r0, #1
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	d1d6      	bne.n	8005bbe <_svfiprintf_r+0x176>
 8005c10:	89ab      	ldrh	r3, [r5, #12]
 8005c12:	065b      	lsls	r3, r3, #25
 8005c14:	f53f af2c 	bmi.w	8005a70 <_svfiprintf_r+0x28>
 8005c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c1a:	b01d      	add	sp, #116	; 0x74
 8005c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c20:	ab03      	add	r3, sp, #12
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	462a      	mov	r2, r5
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <_svfiprintf_r+0x1f8>)
 8005c28:	a904      	add	r1, sp, #16
 8005c2a:	4638      	mov	r0, r7
 8005c2c:	f000 f87a 	bl	8005d24 <_printf_i>
 8005c30:	e7eb      	b.n	8005c0a <_svfiprintf_r+0x1c2>
 8005c32:	bf00      	nop
 8005c34:	08006b54 	.word	0x08006b54
 8005c38:	08006b5e 	.word	0x08006b5e
 8005c3c:	00000000 	.word	0x00000000
 8005c40:	08005991 	.word	0x08005991
 8005c44:	08006b5a 	.word	0x08006b5a

08005c48 <_printf_common>:
 8005c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	4699      	mov	r9, r3
 8005c50:	688a      	ldr	r2, [r1, #8]
 8005c52:	690b      	ldr	r3, [r1, #16]
 8005c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	bfb8      	it	lt
 8005c5c:	4613      	movlt	r3, r2
 8005c5e:	6033      	str	r3, [r6, #0]
 8005c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c64:	4607      	mov	r7, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	b10a      	cbz	r2, 8005c6e <_printf_common+0x26>
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	6033      	str	r3, [r6, #0]
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	0699      	lsls	r1, r3, #26
 8005c72:	bf42      	ittt	mi
 8005c74:	6833      	ldrmi	r3, [r6, #0]
 8005c76:	3302      	addmi	r3, #2
 8005c78:	6033      	strmi	r3, [r6, #0]
 8005c7a:	6825      	ldr	r5, [r4, #0]
 8005c7c:	f015 0506 	ands.w	r5, r5, #6
 8005c80:	d106      	bne.n	8005c90 <_printf_common+0x48>
 8005c82:	f104 0a19 	add.w	sl, r4, #25
 8005c86:	68e3      	ldr	r3, [r4, #12]
 8005c88:	6832      	ldr	r2, [r6, #0]
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	42ab      	cmp	r3, r5
 8005c8e:	dc26      	bgt.n	8005cde <_printf_common+0x96>
 8005c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c94:	1e13      	subs	r3, r2, #0
 8005c96:	6822      	ldr	r2, [r4, #0]
 8005c98:	bf18      	it	ne
 8005c9a:	2301      	movne	r3, #1
 8005c9c:	0692      	lsls	r2, r2, #26
 8005c9e:	d42b      	bmi.n	8005cf8 <_printf_common+0xb0>
 8005ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	47c0      	blx	r8
 8005caa:	3001      	adds	r0, #1
 8005cac:	d01e      	beq.n	8005cec <_printf_common+0xa4>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	68e5      	ldr	r5, [r4, #12]
 8005cb2:	6832      	ldr	r2, [r6, #0]
 8005cb4:	f003 0306 	and.w	r3, r3, #6
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	bf08      	it	eq
 8005cbc:	1aad      	subeq	r5, r5, r2
 8005cbe:	68a3      	ldr	r3, [r4, #8]
 8005cc0:	6922      	ldr	r2, [r4, #16]
 8005cc2:	bf0c      	ite	eq
 8005cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cc8:	2500      	movne	r5, #0
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	bfc4      	itt	gt
 8005cce:	1a9b      	subgt	r3, r3, r2
 8005cd0:	18ed      	addgt	r5, r5, r3
 8005cd2:	2600      	movs	r6, #0
 8005cd4:	341a      	adds	r4, #26
 8005cd6:	42b5      	cmp	r5, r6
 8005cd8:	d11a      	bne.n	8005d10 <_printf_common+0xc8>
 8005cda:	2000      	movs	r0, #0
 8005cdc:	e008      	b.n	8005cf0 <_printf_common+0xa8>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	4652      	mov	r2, sl
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	47c0      	blx	r8
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d103      	bne.n	8005cf4 <_printf_common+0xac>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf4:	3501      	adds	r5, #1
 8005cf6:	e7c6      	b.n	8005c86 <_printf_common+0x3e>
 8005cf8:	18e1      	adds	r1, r4, r3
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	2030      	movs	r0, #48	; 0x30
 8005cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d02:	4422      	add	r2, r4
 8005d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d0c:	3302      	adds	r3, #2
 8005d0e:	e7c7      	b.n	8005ca0 <_printf_common+0x58>
 8005d10:	2301      	movs	r3, #1
 8005d12:	4622      	mov	r2, r4
 8005d14:	4649      	mov	r1, r9
 8005d16:	4638      	mov	r0, r7
 8005d18:	47c0      	blx	r8
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d0e6      	beq.n	8005cec <_printf_common+0xa4>
 8005d1e:	3601      	adds	r6, #1
 8005d20:	e7d9      	b.n	8005cd6 <_printf_common+0x8e>
	...

08005d24 <_printf_i>:
 8005d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d28:	460c      	mov	r4, r1
 8005d2a:	4691      	mov	r9, r2
 8005d2c:	7e27      	ldrb	r7, [r4, #24]
 8005d2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d30:	2f78      	cmp	r7, #120	; 0x78
 8005d32:	4680      	mov	r8, r0
 8005d34:	469a      	mov	sl, r3
 8005d36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d3a:	d807      	bhi.n	8005d4c <_printf_i+0x28>
 8005d3c:	2f62      	cmp	r7, #98	; 0x62
 8005d3e:	d80a      	bhi.n	8005d56 <_printf_i+0x32>
 8005d40:	2f00      	cmp	r7, #0
 8005d42:	f000 80d8 	beq.w	8005ef6 <_printf_i+0x1d2>
 8005d46:	2f58      	cmp	r7, #88	; 0x58
 8005d48:	f000 80a3 	beq.w	8005e92 <_printf_i+0x16e>
 8005d4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d54:	e03a      	b.n	8005dcc <_printf_i+0xa8>
 8005d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d5a:	2b15      	cmp	r3, #21
 8005d5c:	d8f6      	bhi.n	8005d4c <_printf_i+0x28>
 8005d5e:	a001      	add	r0, pc, #4	; (adr r0, 8005d64 <_printf_i+0x40>)
 8005d60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d64:	08005dbd 	.word	0x08005dbd
 8005d68:	08005dd1 	.word	0x08005dd1
 8005d6c:	08005d4d 	.word	0x08005d4d
 8005d70:	08005d4d 	.word	0x08005d4d
 8005d74:	08005d4d 	.word	0x08005d4d
 8005d78:	08005d4d 	.word	0x08005d4d
 8005d7c:	08005dd1 	.word	0x08005dd1
 8005d80:	08005d4d 	.word	0x08005d4d
 8005d84:	08005d4d 	.word	0x08005d4d
 8005d88:	08005d4d 	.word	0x08005d4d
 8005d8c:	08005d4d 	.word	0x08005d4d
 8005d90:	08005edd 	.word	0x08005edd
 8005d94:	08005e01 	.word	0x08005e01
 8005d98:	08005ebf 	.word	0x08005ebf
 8005d9c:	08005d4d 	.word	0x08005d4d
 8005da0:	08005d4d 	.word	0x08005d4d
 8005da4:	08005eff 	.word	0x08005eff
 8005da8:	08005d4d 	.word	0x08005d4d
 8005dac:	08005e01 	.word	0x08005e01
 8005db0:	08005d4d 	.word	0x08005d4d
 8005db4:	08005d4d 	.word	0x08005d4d
 8005db8:	08005ec7 	.word	0x08005ec7
 8005dbc:	680b      	ldr	r3, [r1, #0]
 8005dbe:	1d1a      	adds	r2, r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	600a      	str	r2, [r1, #0]
 8005dc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e0a3      	b.n	8005f18 <_printf_i+0x1f4>
 8005dd0:	6825      	ldr	r5, [r4, #0]
 8005dd2:	6808      	ldr	r0, [r1, #0]
 8005dd4:	062e      	lsls	r6, r5, #24
 8005dd6:	f100 0304 	add.w	r3, r0, #4
 8005dda:	d50a      	bpl.n	8005df2 <_printf_i+0xce>
 8005ddc:	6805      	ldr	r5, [r0, #0]
 8005dde:	600b      	str	r3, [r1, #0]
 8005de0:	2d00      	cmp	r5, #0
 8005de2:	da03      	bge.n	8005dec <_printf_i+0xc8>
 8005de4:	232d      	movs	r3, #45	; 0x2d
 8005de6:	426d      	negs	r5, r5
 8005de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dec:	485e      	ldr	r0, [pc, #376]	; (8005f68 <_printf_i+0x244>)
 8005dee:	230a      	movs	r3, #10
 8005df0:	e019      	b.n	8005e26 <_printf_i+0x102>
 8005df2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005df6:	6805      	ldr	r5, [r0, #0]
 8005df8:	600b      	str	r3, [r1, #0]
 8005dfa:	bf18      	it	ne
 8005dfc:	b22d      	sxthne	r5, r5
 8005dfe:	e7ef      	b.n	8005de0 <_printf_i+0xbc>
 8005e00:	680b      	ldr	r3, [r1, #0]
 8005e02:	6825      	ldr	r5, [r4, #0]
 8005e04:	1d18      	adds	r0, r3, #4
 8005e06:	6008      	str	r0, [r1, #0]
 8005e08:	0628      	lsls	r0, r5, #24
 8005e0a:	d501      	bpl.n	8005e10 <_printf_i+0xec>
 8005e0c:	681d      	ldr	r5, [r3, #0]
 8005e0e:	e002      	b.n	8005e16 <_printf_i+0xf2>
 8005e10:	0669      	lsls	r1, r5, #25
 8005e12:	d5fb      	bpl.n	8005e0c <_printf_i+0xe8>
 8005e14:	881d      	ldrh	r5, [r3, #0]
 8005e16:	4854      	ldr	r0, [pc, #336]	; (8005f68 <_printf_i+0x244>)
 8005e18:	2f6f      	cmp	r7, #111	; 0x6f
 8005e1a:	bf0c      	ite	eq
 8005e1c:	2308      	moveq	r3, #8
 8005e1e:	230a      	movne	r3, #10
 8005e20:	2100      	movs	r1, #0
 8005e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e26:	6866      	ldr	r6, [r4, #4]
 8005e28:	60a6      	str	r6, [r4, #8]
 8005e2a:	2e00      	cmp	r6, #0
 8005e2c:	bfa2      	ittt	ge
 8005e2e:	6821      	ldrge	r1, [r4, #0]
 8005e30:	f021 0104 	bicge.w	r1, r1, #4
 8005e34:	6021      	strge	r1, [r4, #0]
 8005e36:	b90d      	cbnz	r5, 8005e3c <_printf_i+0x118>
 8005e38:	2e00      	cmp	r6, #0
 8005e3a:	d04d      	beq.n	8005ed8 <_printf_i+0x1b4>
 8005e3c:	4616      	mov	r6, r2
 8005e3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e42:	fb03 5711 	mls	r7, r3, r1, r5
 8005e46:	5dc7      	ldrb	r7, [r0, r7]
 8005e48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e4c:	462f      	mov	r7, r5
 8005e4e:	42bb      	cmp	r3, r7
 8005e50:	460d      	mov	r5, r1
 8005e52:	d9f4      	bls.n	8005e3e <_printf_i+0x11a>
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d10b      	bne.n	8005e70 <_printf_i+0x14c>
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	07df      	lsls	r7, r3, #31
 8005e5c:	d508      	bpl.n	8005e70 <_printf_i+0x14c>
 8005e5e:	6923      	ldr	r3, [r4, #16]
 8005e60:	6861      	ldr	r1, [r4, #4]
 8005e62:	4299      	cmp	r1, r3
 8005e64:	bfde      	ittt	le
 8005e66:	2330      	movle	r3, #48	; 0x30
 8005e68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e6c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005e70:	1b92      	subs	r2, r2, r6
 8005e72:	6122      	str	r2, [r4, #16]
 8005e74:	f8cd a000 	str.w	sl, [sp]
 8005e78:	464b      	mov	r3, r9
 8005e7a:	aa03      	add	r2, sp, #12
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4640      	mov	r0, r8
 8005e80:	f7ff fee2 	bl	8005c48 <_printf_common>
 8005e84:	3001      	adds	r0, #1
 8005e86:	d14c      	bne.n	8005f22 <_printf_i+0x1fe>
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e8c:	b004      	add	sp, #16
 8005e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e92:	4835      	ldr	r0, [pc, #212]	; (8005f68 <_printf_i+0x244>)
 8005e94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	680e      	ldr	r6, [r1, #0]
 8005e9c:	061f      	lsls	r7, r3, #24
 8005e9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005ea2:	600e      	str	r6, [r1, #0]
 8005ea4:	d514      	bpl.n	8005ed0 <_printf_i+0x1ac>
 8005ea6:	07d9      	lsls	r1, r3, #31
 8005ea8:	bf44      	itt	mi
 8005eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8005eae:	6023      	strmi	r3, [r4, #0]
 8005eb0:	b91d      	cbnz	r5, 8005eba <_printf_i+0x196>
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	f023 0320 	bic.w	r3, r3, #32
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	2310      	movs	r3, #16
 8005ebc:	e7b0      	b.n	8005e20 <_printf_i+0xfc>
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	f043 0320 	orr.w	r3, r3, #32
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	2378      	movs	r3, #120	; 0x78
 8005ec8:	4828      	ldr	r0, [pc, #160]	; (8005f6c <_printf_i+0x248>)
 8005eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ece:	e7e3      	b.n	8005e98 <_printf_i+0x174>
 8005ed0:	065e      	lsls	r6, r3, #25
 8005ed2:	bf48      	it	mi
 8005ed4:	b2ad      	uxthmi	r5, r5
 8005ed6:	e7e6      	b.n	8005ea6 <_printf_i+0x182>
 8005ed8:	4616      	mov	r6, r2
 8005eda:	e7bb      	b.n	8005e54 <_printf_i+0x130>
 8005edc:	680b      	ldr	r3, [r1, #0]
 8005ede:	6826      	ldr	r6, [r4, #0]
 8005ee0:	6960      	ldr	r0, [r4, #20]
 8005ee2:	1d1d      	adds	r5, r3, #4
 8005ee4:	600d      	str	r5, [r1, #0]
 8005ee6:	0635      	lsls	r5, r6, #24
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	d501      	bpl.n	8005ef0 <_printf_i+0x1cc>
 8005eec:	6018      	str	r0, [r3, #0]
 8005eee:	e002      	b.n	8005ef6 <_printf_i+0x1d2>
 8005ef0:	0671      	lsls	r1, r6, #25
 8005ef2:	d5fb      	bpl.n	8005eec <_printf_i+0x1c8>
 8005ef4:	8018      	strh	r0, [r3, #0]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	6123      	str	r3, [r4, #16]
 8005efa:	4616      	mov	r6, r2
 8005efc:	e7ba      	b.n	8005e74 <_printf_i+0x150>
 8005efe:	680b      	ldr	r3, [r1, #0]
 8005f00:	1d1a      	adds	r2, r3, #4
 8005f02:	600a      	str	r2, [r1, #0]
 8005f04:	681e      	ldr	r6, [r3, #0]
 8005f06:	6862      	ldr	r2, [r4, #4]
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	f7fa f968 	bl	80001e0 <memchr>
 8005f10:	b108      	cbz	r0, 8005f16 <_printf_i+0x1f2>
 8005f12:	1b80      	subs	r0, r0, r6
 8005f14:	6060      	str	r0, [r4, #4]
 8005f16:	6863      	ldr	r3, [r4, #4]
 8005f18:	6123      	str	r3, [r4, #16]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f20:	e7a8      	b.n	8005e74 <_printf_i+0x150>
 8005f22:	6923      	ldr	r3, [r4, #16]
 8005f24:	4632      	mov	r2, r6
 8005f26:	4649      	mov	r1, r9
 8005f28:	4640      	mov	r0, r8
 8005f2a:	47d0      	blx	sl
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d0ab      	beq.n	8005e88 <_printf_i+0x164>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	079b      	lsls	r3, r3, #30
 8005f34:	d413      	bmi.n	8005f5e <_printf_i+0x23a>
 8005f36:	68e0      	ldr	r0, [r4, #12]
 8005f38:	9b03      	ldr	r3, [sp, #12]
 8005f3a:	4298      	cmp	r0, r3
 8005f3c:	bfb8      	it	lt
 8005f3e:	4618      	movlt	r0, r3
 8005f40:	e7a4      	b.n	8005e8c <_printf_i+0x168>
 8005f42:	2301      	movs	r3, #1
 8005f44:	4632      	mov	r2, r6
 8005f46:	4649      	mov	r1, r9
 8005f48:	4640      	mov	r0, r8
 8005f4a:	47d0      	blx	sl
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d09b      	beq.n	8005e88 <_printf_i+0x164>
 8005f50:	3501      	adds	r5, #1
 8005f52:	68e3      	ldr	r3, [r4, #12]
 8005f54:	9903      	ldr	r1, [sp, #12]
 8005f56:	1a5b      	subs	r3, r3, r1
 8005f58:	42ab      	cmp	r3, r5
 8005f5a:	dcf2      	bgt.n	8005f42 <_printf_i+0x21e>
 8005f5c:	e7eb      	b.n	8005f36 <_printf_i+0x212>
 8005f5e:	2500      	movs	r5, #0
 8005f60:	f104 0619 	add.w	r6, r4, #25
 8005f64:	e7f5      	b.n	8005f52 <_printf_i+0x22e>
 8005f66:	bf00      	nop
 8005f68:	08006b65 	.word	0x08006b65
 8005f6c:	08006b76 	.word	0x08006b76

08005f70 <memmove>:
 8005f70:	4288      	cmp	r0, r1
 8005f72:	b510      	push	{r4, lr}
 8005f74:	eb01 0402 	add.w	r4, r1, r2
 8005f78:	d902      	bls.n	8005f80 <memmove+0x10>
 8005f7a:	4284      	cmp	r4, r0
 8005f7c:	4623      	mov	r3, r4
 8005f7e:	d807      	bhi.n	8005f90 <memmove+0x20>
 8005f80:	1e43      	subs	r3, r0, #1
 8005f82:	42a1      	cmp	r1, r4
 8005f84:	d008      	beq.n	8005f98 <memmove+0x28>
 8005f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f8e:	e7f8      	b.n	8005f82 <memmove+0x12>
 8005f90:	4402      	add	r2, r0
 8005f92:	4601      	mov	r1, r0
 8005f94:	428a      	cmp	r2, r1
 8005f96:	d100      	bne.n	8005f9a <memmove+0x2a>
 8005f98:	bd10      	pop	{r4, pc}
 8005f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fa2:	e7f7      	b.n	8005f94 <memmove+0x24>

08005fa4 <_free_r>:
 8005fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fa6:	2900      	cmp	r1, #0
 8005fa8:	d048      	beq.n	800603c <_free_r+0x98>
 8005faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fae:	9001      	str	r0, [sp, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8005fb6:	bfb8      	it	lt
 8005fb8:	18e4      	addlt	r4, r4, r3
 8005fba:	f000 f8d3 	bl	8006164 <__malloc_lock>
 8005fbe:	4a20      	ldr	r2, [pc, #128]	; (8006040 <_free_r+0x9c>)
 8005fc0:	9801      	ldr	r0, [sp, #4]
 8005fc2:	6813      	ldr	r3, [r2, #0]
 8005fc4:	4615      	mov	r5, r2
 8005fc6:	b933      	cbnz	r3, 8005fd6 <_free_r+0x32>
 8005fc8:	6063      	str	r3, [r4, #4]
 8005fca:	6014      	str	r4, [r2, #0]
 8005fcc:	b003      	add	sp, #12
 8005fce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fd2:	f000 b8cd 	b.w	8006170 <__malloc_unlock>
 8005fd6:	42a3      	cmp	r3, r4
 8005fd8:	d90b      	bls.n	8005ff2 <_free_r+0x4e>
 8005fda:	6821      	ldr	r1, [r4, #0]
 8005fdc:	1862      	adds	r2, r4, r1
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	bf04      	itt	eq
 8005fe2:	681a      	ldreq	r2, [r3, #0]
 8005fe4:	685b      	ldreq	r3, [r3, #4]
 8005fe6:	6063      	str	r3, [r4, #4]
 8005fe8:	bf04      	itt	eq
 8005fea:	1852      	addeq	r2, r2, r1
 8005fec:	6022      	streq	r2, [r4, #0]
 8005fee:	602c      	str	r4, [r5, #0]
 8005ff0:	e7ec      	b.n	8005fcc <_free_r+0x28>
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	b10b      	cbz	r3, 8005ffc <_free_r+0x58>
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	d9fa      	bls.n	8005ff2 <_free_r+0x4e>
 8005ffc:	6811      	ldr	r1, [r2, #0]
 8005ffe:	1855      	adds	r5, r2, r1
 8006000:	42a5      	cmp	r5, r4
 8006002:	d10b      	bne.n	800601c <_free_r+0x78>
 8006004:	6824      	ldr	r4, [r4, #0]
 8006006:	4421      	add	r1, r4
 8006008:	1854      	adds	r4, r2, r1
 800600a:	42a3      	cmp	r3, r4
 800600c:	6011      	str	r1, [r2, #0]
 800600e:	d1dd      	bne.n	8005fcc <_free_r+0x28>
 8006010:	681c      	ldr	r4, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	6053      	str	r3, [r2, #4]
 8006016:	4421      	add	r1, r4
 8006018:	6011      	str	r1, [r2, #0]
 800601a:	e7d7      	b.n	8005fcc <_free_r+0x28>
 800601c:	d902      	bls.n	8006024 <_free_r+0x80>
 800601e:	230c      	movs	r3, #12
 8006020:	6003      	str	r3, [r0, #0]
 8006022:	e7d3      	b.n	8005fcc <_free_r+0x28>
 8006024:	6825      	ldr	r5, [r4, #0]
 8006026:	1961      	adds	r1, r4, r5
 8006028:	428b      	cmp	r3, r1
 800602a:	bf04      	itt	eq
 800602c:	6819      	ldreq	r1, [r3, #0]
 800602e:	685b      	ldreq	r3, [r3, #4]
 8006030:	6063      	str	r3, [r4, #4]
 8006032:	bf04      	itt	eq
 8006034:	1949      	addeq	r1, r1, r5
 8006036:	6021      	streq	r1, [r4, #0]
 8006038:	6054      	str	r4, [r2, #4]
 800603a:	e7c7      	b.n	8005fcc <_free_r+0x28>
 800603c:	b003      	add	sp, #12
 800603e:	bd30      	pop	{r4, r5, pc}
 8006040:	200000f4 	.word	0x200000f4

08006044 <_malloc_r>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	1ccd      	adds	r5, r1, #3
 8006048:	f025 0503 	bic.w	r5, r5, #3
 800604c:	3508      	adds	r5, #8
 800604e:	2d0c      	cmp	r5, #12
 8006050:	bf38      	it	cc
 8006052:	250c      	movcc	r5, #12
 8006054:	2d00      	cmp	r5, #0
 8006056:	4606      	mov	r6, r0
 8006058:	db01      	blt.n	800605e <_malloc_r+0x1a>
 800605a:	42a9      	cmp	r1, r5
 800605c:	d903      	bls.n	8006066 <_malloc_r+0x22>
 800605e:	230c      	movs	r3, #12
 8006060:	6033      	str	r3, [r6, #0]
 8006062:	2000      	movs	r0, #0
 8006064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006066:	f000 f87d 	bl	8006164 <__malloc_lock>
 800606a:	4921      	ldr	r1, [pc, #132]	; (80060f0 <_malloc_r+0xac>)
 800606c:	680a      	ldr	r2, [r1, #0]
 800606e:	4614      	mov	r4, r2
 8006070:	b99c      	cbnz	r4, 800609a <_malloc_r+0x56>
 8006072:	4f20      	ldr	r7, [pc, #128]	; (80060f4 <_malloc_r+0xb0>)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	b923      	cbnz	r3, 8006082 <_malloc_r+0x3e>
 8006078:	4621      	mov	r1, r4
 800607a:	4630      	mov	r0, r6
 800607c:	f000 f862 	bl	8006144 <_sbrk_r>
 8006080:	6038      	str	r0, [r7, #0]
 8006082:	4629      	mov	r1, r5
 8006084:	4630      	mov	r0, r6
 8006086:	f000 f85d 	bl	8006144 <_sbrk_r>
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	d123      	bne.n	80060d6 <_malloc_r+0x92>
 800608e:	230c      	movs	r3, #12
 8006090:	6033      	str	r3, [r6, #0]
 8006092:	4630      	mov	r0, r6
 8006094:	f000 f86c 	bl	8006170 <__malloc_unlock>
 8006098:	e7e3      	b.n	8006062 <_malloc_r+0x1e>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	1b5b      	subs	r3, r3, r5
 800609e:	d417      	bmi.n	80060d0 <_malloc_r+0x8c>
 80060a0:	2b0b      	cmp	r3, #11
 80060a2:	d903      	bls.n	80060ac <_malloc_r+0x68>
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	441c      	add	r4, r3
 80060a8:	6025      	str	r5, [r4, #0]
 80060aa:	e004      	b.n	80060b6 <_malloc_r+0x72>
 80060ac:	6863      	ldr	r3, [r4, #4]
 80060ae:	42a2      	cmp	r2, r4
 80060b0:	bf0c      	ite	eq
 80060b2:	600b      	streq	r3, [r1, #0]
 80060b4:	6053      	strne	r3, [r2, #4]
 80060b6:	4630      	mov	r0, r6
 80060b8:	f000 f85a 	bl	8006170 <__malloc_unlock>
 80060bc:	f104 000b 	add.w	r0, r4, #11
 80060c0:	1d23      	adds	r3, r4, #4
 80060c2:	f020 0007 	bic.w	r0, r0, #7
 80060c6:	1ac2      	subs	r2, r0, r3
 80060c8:	d0cc      	beq.n	8006064 <_malloc_r+0x20>
 80060ca:	1a1b      	subs	r3, r3, r0
 80060cc:	50a3      	str	r3, [r4, r2]
 80060ce:	e7c9      	b.n	8006064 <_malloc_r+0x20>
 80060d0:	4622      	mov	r2, r4
 80060d2:	6864      	ldr	r4, [r4, #4]
 80060d4:	e7cc      	b.n	8006070 <_malloc_r+0x2c>
 80060d6:	1cc4      	adds	r4, r0, #3
 80060d8:	f024 0403 	bic.w	r4, r4, #3
 80060dc:	42a0      	cmp	r0, r4
 80060de:	d0e3      	beq.n	80060a8 <_malloc_r+0x64>
 80060e0:	1a21      	subs	r1, r4, r0
 80060e2:	4630      	mov	r0, r6
 80060e4:	f000 f82e 	bl	8006144 <_sbrk_r>
 80060e8:	3001      	adds	r0, #1
 80060ea:	d1dd      	bne.n	80060a8 <_malloc_r+0x64>
 80060ec:	e7cf      	b.n	800608e <_malloc_r+0x4a>
 80060ee:	bf00      	nop
 80060f0:	200000f4 	.word	0x200000f4
 80060f4:	200000f8 	.word	0x200000f8

080060f8 <_realloc_r>:
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	4607      	mov	r7, r0
 80060fc:	4614      	mov	r4, r2
 80060fe:	460e      	mov	r6, r1
 8006100:	b921      	cbnz	r1, 800610c <_realloc_r+0x14>
 8006102:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006106:	4611      	mov	r1, r2
 8006108:	f7ff bf9c 	b.w	8006044 <_malloc_r>
 800610c:	b922      	cbnz	r2, 8006118 <_realloc_r+0x20>
 800610e:	f7ff ff49 	bl	8005fa4 <_free_r>
 8006112:	4625      	mov	r5, r4
 8006114:	4628      	mov	r0, r5
 8006116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006118:	f000 f830 	bl	800617c <_malloc_usable_size_r>
 800611c:	42a0      	cmp	r0, r4
 800611e:	d20f      	bcs.n	8006140 <_realloc_r+0x48>
 8006120:	4621      	mov	r1, r4
 8006122:	4638      	mov	r0, r7
 8006124:	f7ff ff8e 	bl	8006044 <_malloc_r>
 8006128:	4605      	mov	r5, r0
 800612a:	2800      	cmp	r0, #0
 800612c:	d0f2      	beq.n	8006114 <_realloc_r+0x1c>
 800612e:	4631      	mov	r1, r6
 8006130:	4622      	mov	r2, r4
 8006132:	f7ff fbf7 	bl	8005924 <memcpy>
 8006136:	4631      	mov	r1, r6
 8006138:	4638      	mov	r0, r7
 800613a:	f7ff ff33 	bl	8005fa4 <_free_r>
 800613e:	e7e9      	b.n	8006114 <_realloc_r+0x1c>
 8006140:	4635      	mov	r5, r6
 8006142:	e7e7      	b.n	8006114 <_realloc_r+0x1c>

08006144 <_sbrk_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	4d06      	ldr	r5, [pc, #24]	; (8006160 <_sbrk_r+0x1c>)
 8006148:	2300      	movs	r3, #0
 800614a:	4604      	mov	r4, r0
 800614c:	4608      	mov	r0, r1
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	f7fb fee6 	bl	8001f20 <_sbrk>
 8006154:	1c43      	adds	r3, r0, #1
 8006156:	d102      	bne.n	800615e <_sbrk_r+0x1a>
 8006158:	682b      	ldr	r3, [r5, #0]
 800615a:	b103      	cbz	r3, 800615e <_sbrk_r+0x1a>
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	20000314 	.word	0x20000314

08006164 <__malloc_lock>:
 8006164:	4801      	ldr	r0, [pc, #4]	; (800616c <__malloc_lock+0x8>)
 8006166:	f000 b811 	b.w	800618c <__retarget_lock_acquire_recursive>
 800616a:	bf00      	nop
 800616c:	2000031c 	.word	0x2000031c

08006170 <__malloc_unlock>:
 8006170:	4801      	ldr	r0, [pc, #4]	; (8006178 <__malloc_unlock+0x8>)
 8006172:	f000 b80c 	b.w	800618e <__retarget_lock_release_recursive>
 8006176:	bf00      	nop
 8006178:	2000031c 	.word	0x2000031c

0800617c <_malloc_usable_size_r>:
 800617c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006180:	1f18      	subs	r0, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	bfbc      	itt	lt
 8006186:	580b      	ldrlt	r3, [r1, r0]
 8006188:	18c0      	addlt	r0, r0, r3
 800618a:	4770      	bx	lr

0800618c <__retarget_lock_acquire_recursive>:
 800618c:	4770      	bx	lr

0800618e <__retarget_lock_release_recursive>:
 800618e:	4770      	bx	lr

08006190 <_init>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	bf00      	nop
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr

0800619c <_fini>:
 800619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619e:	bf00      	nop
 80061a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a2:	bc08      	pop	{r3}
 80061a4:	469e      	mov	lr, r3
 80061a6:	4770      	bx	lr
